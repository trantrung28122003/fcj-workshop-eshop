[
{
	"uri": "/7-authentication-and-authorization/7.1-authenticate-with-cognito-api-gateway/",
	"title": "Configure Cognito Authentication in API Gateway",
	"tags": [],
	"description": "",
	"content": "Creating your first AWS account Overview Main Content  Creating a new AWS Account Setting up MFA for the AWS Account root user Creating an Administrator Accounts and Groups Getting support for Account Authentication  "
},
{
	"uri": "/4-deploy-lambda-function/4.1-create-iam-role-for-lambda-function/",
	"title": "Create IAM Role for Lambda Function",
	"tags": [],
	"description": "",
	"content": "Overview Before deploying any Lambda function, you need to create an IAM Role that grants the Lambda function permission to access other AWS services, such as reading/writing data in DynamoDB. In this guide, we will assign the necessary permissions for Lambda to interact with DynamoDB.\nIAM (Identity and Access Management) acts as an authorization layer, allowing Lambda to operate securely within your AWS environment.\nSteps to Create an IAM Role  Navigate to the IAM Console and select Roles in the left-hand menu. Click Create role. Under Trusted entity type, choose AWS service. Under Use case, select Lambda. Click Next. In the Permissions policies section, search for and attach AmazonDynamoDBFullAccess.\n(You can also create a custom policy if you want to enforce stricter, more granular permissions.) Click Next, then enter a name for your role, for example: lambda-dynamodb-role. Click Create role to finalize.  Reusability This IAM Role can be reused for multiple Lambda functions that interact with DynamoDB, such as:\n Creating or updating data Deleting items Querying items by ID or listing items  In production environments, follow the principle of least privilege by creating a custom IAM policy that grants only the specific permissions needed (e.g., PutItem, GetItem, DeleteItem) instead of using the full-access policy.\n\r"
},
{
	"uri": "/5-config-api-gateway/5.1-create-resource-and-method/",
	"title": "Create Methods",
	"tags": [],
	"description": "",
	"content": "Creating your first AWS account Overview Main Content  Creating a new AWS Account Setting up MFA for the AWS Account root user Creating an Administrator Accounts and Groups Getting support for Account Authentication  "
},
{
	"uri": "/2-image-upload-and-resize/2.1-upload-original-image/2.1.1-create-s3-bucket/",
	"title": "Create S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Objective In this step, you will create an S3 Bucket to store the original images uploaded from the frontend. This is the foundation for image processing in the following steps.\n Steps to Manually Create an S3 Bucket   Go to the AWS S3 Console and click the Create bucket button.\n  In the General configuration section, enter the following details:\n    Bucket name: upload-originals-fcj\n  AWS Region: Choose a single AWS region for deploying your entire architecture (Lambda, S3, DynamoDB, etc.) to reduce latency and simplify permission configurations.\n(Example: Asia Pacific (Singapore) ap-southeast-1)\n  Bucket type: General purpose (default)\n  Note: The bucket name must be globally unique and cannot contain spaces or special characters.\n\r In the Block Public Access settings section, keep the default settings (all boxes checked) to prevent public access.\n This bucket will store original images, which will be accessed via Presigned URLs — no need to make the bucket public.\n   Finally, scroll down and click Create bucket to complete the setup.\n   Result Once completed, you will see the upload-originals-fcj bucket listed. This bucket will be used in Lambda functions to generate Presigned URLs and process images.\n"
},
{
	"uri": "/2-image-upload-and-resize/2.2-resize-image/2.2.1-create-s3-buckets/",
	"title": "Create S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Objective In this step, you will create an S3 Bucket to store images that have been resized by a Lambda function.\nThis bucket will be used to separate original images from optimized ones, ensuring both performance and security for the frontend.\n Steps to Create S3 Bucket Manually   Go to the AWS S3 Console and click on Create bucket.\n  In the General configuration section, enter the following information:\n    Bucket name: resize-image-fcj\n  AWS Region: Use the same region as your other services (Lambda, DynamoDB, etc.) – for example: Asia Pacific (Singapore) ap-southeast-1\n  Bucket type: General purpose (default)\n  Note: Bucket names must be globally unique and must not contain spaces or special characters.\n\rIn the Block Public Access settings section:    Uncheck Block all public access\n  Check the box I acknowledge that the current settings might result in this bucket and the objects within becoming public.\n   Since resized images will be accessed directly from the frontend (browser), public access needs to be enabled.\n Finally, scroll down and click Create bucket to finish.   ✅ Result After completing the above steps, you will see the resize-image-fcj bucket listed.\nThis bucket will be used by Lambda functions to store and serve optimized images that have just been uploaded.\n"
},
{
	"uri": "/6-setup-cognito-userpool/6.1-create-user-pool/",
	"title": "Create UserPool",
	"tags": [],
	"description": "",
	"content": "Creating your first AWS account Overview Main Content  Creating a new AWS Account Setting up MFA for the AWS Account root user Creating an Administrator Accounts and Groups Getting support for Account Authentication  "
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Overview of Serverless Architecture Serverless is a cloud computing model that lets you run applications without managing servers, operating systems, or infrastructure. Amazon Web Services automatically handles:\n Provisioning compute when there’s a request or event Automatic scaling to meet any request volume, from one to thousands Shutting down idle resources to save costs Hardware maintenance and security patching  Benefits of going serverless\n Reduced operational overhead: no need to manage servers or set up auto-scaling Faster deployments: update your code and deploy instantly Pay-per-use billing: charged only for the number of invocations and execution time (milliseconds), plus storage fees based on read/write capacity and GB-months Event-driven architecture: easily integrate with services like S3, DynamoDB Streams, and API Gateway  Reference: AWS Serverless Computing Overview\n Services Used in This Workshop AWS Lambda  A serverless compute service that runs your code in response to events (event-driven). Automatically scales with incoming events; you pay only for invocations and execution duration (in milliseconds). Supports multiple languages (Node.js, Python, C#, Java, Go, etc.) and lets you package dependencies as deployment packages or container images. Natively integrates with other AWS services (S3, DynamoDB, Kinesis, SNS, SQS, API Gateway, and more). Offers versioning and aliases to enable blue/green or canary deployments.  Documentation: AWS Lambda Developer Guide\nAmazon API Gateway  A fully managed service to create, publish, secure, and monitor RESTful or WebSocket APIs. Supports two API types: REST APIs (feature-rich) and HTTP APIs (lower latency, lower cost). Provides mapping templates to transform request and response payloads, enabling integration with Lambda, HTTP endpoints, or VPC Links. Built-in support for CORS, throttling, caching, and AWS WAF for API protection. Supports authentication via Amazon Cognito User Pools, IAM roles, or custom Lambda authorizers.  Documentation: Amazon API Gateway Developer Guide\nAmazon S3  Durable (99.999999999%) object storage with virtually unlimited scalability. Multiple storage classes (Standard, Intelligent-Tiering, Infrequent Access, Glacier) to optimize costs. Features versioning, lifecycle policies (automatic deletion or transition), and event notifications. Provides read-after-write consistency for new PUTs and eventual consistency for overwrite PUTs and DELETEs. Ideal for storing static assets, backups, logs, media files, and big data.  Documentation: Amazon S3 User Guide\nAmazon DynamoDB  Fully managed NoSQL key-value and document database with single-digit millisecond latency. Automatically scales throughput (Read/Write Capacity Units) and storage as needed. Supports eventual consistency (default) and optional strong consistency. Offers DynamoDB Streams for change data capture, TTL for automatic item expiration, and ACID transactions. Distributed architecture based on partition keys for high scalability and reliability.  Documentation: Amazon DynamoDB Developer Guide\nS3 Static Website Hosting  Host static websites (HTML, CSS, JavaScript) directly from an S3 bucket. Configure a bucket as a website endpoint (e.g., http://\u0026lt;bucket-name\u0026gt;.s3-website-\u0026lt;region\u0026gt;.amazonaws.com). Supports custom domains via Amazon Route 53 and HTTPS through Amazon CloudFront. Perfect for SPAs, landing pages, and static documentation.  Documentation: Hosting a Static Website on Amazon S3\nAmazon Cognito  Authentication and authorization service for web and mobile applications. User Pools: user directory with built-in sign-up/sign-in APIs, multi-factor authentication (MFA), and social identity providers. Identity Pools (Federated Identities): issue temporary AWS credentials to authenticated users from User Pools, social providers, or SAML/OIDC. Supports OAuth 2.0, OpenID Connect, and JWT tokens to secure API Gateway and backend services. Integrates with Lambda triggers to customize workflows (e.g., pre-/post-authentication, email/phone verification).  Documentation: Amazon Cognito Developer Guide\n"
},
{
	"uri": "/",
	"title": "Setting up an AWS account",
	"tags": [],
	"description": "",
	"content": "Creating your first AWS account Overview In this first lab, you will be creating your new AWS account and use Multi-factor Authentication (MFA) to improve your account security. Next, you will create an Administrator Group and Admin User to manage access to resources in your account instead of using the root user. Finally, we will step through account authentication with AWS Support in the event you experience authentication problems.\nAWS Account An AWS account is the basic container for all the AWS resources you can create as an AWS customer. By default, each AWS account will have a root user. The root user has full access within your AWS account, and root user permissions cannot be limited. When you first create your AWS account, you will be assessing it as the root user.\nAs a best practice, do not use the AWS account root user for any task where it\u0026rsquo;s not required. Instead, create a new IAM user for each person that requires administrator access. Thereafter, the users in the administrators user group should set up the user groups, users, and so on, for the AWS account. All future interaction should be through the AWS account\u0026rsquo;s users and their own keys instead of the root user. However, to perform some account and service management tasks, you must log in using the root user credentials.\n\rMulti-Factor Authentication (MFA) MFA adds extra security because it requires users to provide unique authentication from an AWS supported MFA mechanism in addition to their regular sign-in credentials when they access AWS websites or services.\nIAM User Group An IAM user group is a collection of IAM users. User groups let you specify permissions for multiple users, which can make it easier to manage the permissions for those users. Any user in that user group automatically has the permissions that are assigned to the user group.\nIAM User An IAM user is an entity that you create in AWS to represent the person or application that uses it to interact with AWS. A user in AWS consists of a name and credentials. Please note that an IAM user with administrator permissions is not the same thing as the AWS account root user.\nAWS Support AWS Basic Support offers all AWS customers access to our Resource Center, Service Health Dashboard, Product FAQs, Discussion Forums, and Support for Health Checks – at no additional charge. Customers who desire a deeper level of support can subscribe to AWS Support at the Developer, Business, or Enterprise level.\nCustomers who choose AWS Support gain one-on-one, fast-response support from AWS engineers. The service helps customers use AWS\u0026rsquo;s products and features. With pay-by-the-month pricing and unlimited support cases, customers are freed from long-term commitments. Customers with operational issues or technical questions can contact a team of support engineers and receive predictable response times and personalized support.\nMain Content  Creating a new AWS Account Setting up MFA for the AWS Account root user Creating an Administrator Accounts and Groups Getting support for Account Authentication  "
},
{
	"uri": "/2-image-upload-and-resize/2.1-upload-original-image/",
	"title": "Upload Original Image",
	"tags": [],
	"description": "",
	"content": "Overview The first step in the image processing workflow is to upload the original image from the frontend to AWS S3, in a secure and efficient manner.\nTo achieve this, you will use an AWS Lambda function to generate a Presigned URL – a temporary, secure link that allows the client to upload the image directly to S3 without routing through a backend server or exposing sensitive credentials.\nAt this stage, resizing or metadata processing is not handled – the goal is solely to ensure that the original image is safely stored in S3.\n\r Main Steps  Create S3 Buckets Create IAM Role Create PresignedURL Lambda Function  "
},
{
	"uri": "/2-image-upload-and-resize/2.2-resize-image/2.2.2-create-iam-role/",
	"title": "Create IAM Role",
	"tags": [],
	"description": "",
	"content": "Create Private Subnet  Click Subnets.  Click Create subnet.    At the Create subnet page.  In the VPC ID section, click Lab VPC. In the Subnet name field, enter Lab Private Subnet. In the Availability Zone section, select the first Availability zone. In the field IPv4 CIRD block enter 10.10.2.0/24.    Scroll to the bottom of the page, click Create subnet.  The next step is to create the necessary security groups for the lab.\n"
},
{
	"uri": "/2-image-upload-and-resize/2.1-upload-original-image/2.1.2-create-iam-role/",
	"title": "Create IAM Role for Lambda GetPresignedUrl",
	"tags": [],
	"description": "",
	"content": "Objective In this section, you will create an IAM Role for the GetPresignedUrl Lambda function.\nThis Lambda function will generate a Presigned URL that allows the client to upload original images to S3 using the PutObject permission.\nTo follow the Principle of Least Privilege, we’ll create a custom IAM Policy that only allows write access to a specific S3 bucket (e.g., upload-originals-fcj).\n Steps to Create a Custom IAM Policy   Go to the IAM Console and select Policies from the left-hand menu.   Click Create policy → then switch to the JSON tab.\n  Paste the following policy and replace \u0026lt;your-bucket-name\u0026gt; with your actual bucket name (e.g., upload-originals-fcj):\n  { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:PutObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::\u0026lt;your-bucket-name\u0026gt;/*\u0026#34; } ] } Click Next, and in the Policy details section, fill in the following:   Policy name: S3PutOriginalImagePolicy Description (optional): S3PutOriginalImagePolicy  Scroll down and click Create policy to complete.   Steps to Create an IAM Role   Next, go to the IAM Console, then select Roles from the left-hand menu.\n  Click Create role.\n  In the Trusted entity type section, choose AWS service.\n  Under Use case, select Lambda.\n  Click Next.\n  In the Permissions policies step, search for and attach the policy named S3PutOriginalImagePolicy.\n  Click Next, and provide a name for your role, for example: lambda-upload-original-role.\n  Click Create role to finish.\n  Result Once completed, you will see a new IAM Role named lambda-upload-original-role under the Roles section of the IAM Console.\nThis role is now configured to allow your Lambda function (get-presigned-url) to upload images directly to your S3 bucket upload-originals-fcj using the PutObject permission — following the principle of least privilege.\n"
},
{
	"uri": "/5-config-api-gateway/5.2-enable-cros-and-deloy/",
	"title": "Enable CROS",
	"tags": [],
	"description": "",
	"content": "Creating your first AWS account Overview Main Content  Creating a new AWS Account Setting up MFA for the AWS Account root user Creating an Administrator Accounts and Groups Getting support for Account Authentication  "
},
{
	"uri": "/4-deploy-lambda-function/4.2-create-or-update-lambda-function/",
	"title": "Hàm Lambda tạo hoặc cập nhập dữ liệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bước này, chúng ta sẽ triển khai hàm Lambda có tên Create_Book – dùng để tạo hoặc cập nhật dữ liệu vào DynamoDB.\nHàm này được viết bằng Node.js và sử dụng quyền truy cập DynamoDB thông qua một IAM Role phù hợp.\nBước 2: Tạo Lambda Function   Truy cập vào AWS Lambda Console và chọn Functions từ thanh điều hướng trái, sau đó nhấn Create function.\n  Ở phần Create function, chọn tab Author from scratch.\n  Trong mục Basic information, nhập:\n Function name: Create_Book Runtime: Node.js 22.x Architecture: x86_64    Hiện tại AWS Lambda hỗ trợ nhiều ngôn ngữ như Java, .NET, Python, Node.js,\u0026hellip; Trong hướng dẫn này, ta sử dụng Node.js 22.x – phiên bản mới và tối ưu hơn so với Node.js 18.x.\n\rTrong phần Change default execution role:   Chọn Use an existing role Sau đó chọn IAM Role đã tạo ở bước trước, ví dụ: lambda-dynamodb-role   Sau khi hoàn tất, nhấn Create function để khởi tạo. Lambda sẽ chuyển sang giao diện chỉnh sửa code để bạn bắt đầu lập trình logic xử lý.   👉 Bạn cần mình viết tiếp phần code xử lý lưu dữ liệu vào DynamoDB bên trong Lambda không? Mình có thể thêm chi tiết cấu trúc bảng, cách dùng PutItemCommand, v.v.\n"
},
{
	"uri": "/2-image-upload-and-resize/",
	"title": "Image Upload And Resize",
	"tags": [],
	"description": "",
	"content": "Overview Image processing is a common requirement in modern systems such as social networks, e-commerce platforms, and user profile management.\nHowever, to ensure that images are uploaded securely, and then automatically processed and resized, the system needs to follow a well-designed architecture:\n A direct upload flow that does not rely on backend intermediaries (reduces server load) Automatic processing using S3 Event Trigger + AWS Lambda Separation of original and optimized images  In this chapter, you will build a complete workflow for uploading images from the client and processing them automatically using AWS. Specifically:\n The image is uploaded directly from the frontend to S3 using a Presigned URL Once the upload is complete, S3 automatically triggers a Lambda function The Lambda function resizes the image and stores it in a separate destination bucket The resized image is then ready to be used in the frontend with optimized dimensions and size  Objectives  Enable clients (web/mobile) to upload images directly using Presigned URLs Automatically resize images after upload using Lambda Function + Sharp Store the resized image in a destination S3 bucket ready for frontend usage   Main Steps  Upload Orginal Image Resize Image  "
},
{
	"uri": "/2-image-upload-and-resize/2.2-resize-image/",
	"title": "Resize Image",
	"tags": [],
	"description": "",
	"content": "Overview After the original image has been successfully uploaded to S3, the next step is to automatically optimize the image (resize) to reduce its size and serve it more efficiently on the frontend.\nInstead of letting the frontend handle image resizing (which may be slow, inconsistent, or insecure), we offload this task to the backend. This ensures it is automated, consistent, and controllable by using AWS Lambda in combination with S3 Event Triggers.\nIn this section, you will build a Lambda function responsible for:\n Listening to S3 events (when a new image is uploaded to the original bucket) Downloading the original image, resizing it using the sharp library Saving the resized image to a separate destination S3 bucket  This image processing approach offers several benefits:\n Ensures the frontend always receives optimized images Improves page load speed and user experience Reduces storage and bandwidth costs   Main Topics  Create the Resize Lambda Function Create the S3 Buckets Create the IAM Role  "
},
{
	"uri": "/6-setup-cognito-userpool/6.2-test-apis-with-postman/",
	"title": "Test APIs With Postman",
	"tags": [],
	"description": "",
	"content": "Creating your first AWS account Overview Main Content  Creating a new AWS Account Setting up MFA for the AWS Account root user Creating an Administrator Accounts and Groups Getting support for Account Authentication  "
},
{
	"uri": "/7-authentication-and-authorization/7.2-authorization-with-cognito-groups/",
	"title": "Test APIs With Postman",
	"tags": [],
	"description": "",
	"content": "Creating your first AWS account Overview Main Content  Creating a new AWS Account Setting up MFA for the AWS Account root user Creating an Administrator Accounts and Groups Getting support for Account Authentication  "
},
{
	"uri": "/5-config-api-gateway/",
	"title": "Config API Gateway",
	"tags": [],
	"description": "",
	"content": "Content:\n Create an AWS account Add payment method Verify your phone number Select Support Plan Wait for your account to be activated Important Warning  Create an AWS account  Go to the Amazon Web Service homepage page. Select Create an AWS Account in the upper right corner.  Note: If you don\u0026rsquo;t see Create an AWS Account, select Sign In to the Console then select Create a new AWS Account.    Enter email information and AWS account name  Complete information.  Confirm the code sent from the email.  After successful email authentication. You complete the account information.  Complete the account registration documents.   You can choose Personal or Business account  Add payment method  Enter your credit card information and select Verify and Add.  Note: You can choose a different address for your account by selecting Use a new address before Verify and Add.    Verify your phone number  Enter the phone number. Enter the security check code then select Call me now. AWS will contact and verify account opening.  Select Support Plan  In the Select a support plan page, select an effective plan, to compare plans, see Compare AWS Support Plans.  Wait for your account to be activated  After selecting Support plan, the account is usually activated after a few minutes, but the process can take up to 24 hours. You will still be able to log in to your AWS account at this time, the AWS Home page may show a “Complete Sign Up” button during this time, even if you have completed all the steps in the registration section. After receiving an email confirming your account has been activated, you can access all AWS services.  Important The following AWS Identity and Access Management (IAM) actions will reach the end of standard support on July 2023: aws-portal:ModifyAccount and aws-portal:ViewAccount. See the Using fine-grained AWS Billing actions to replace these actions with fine-grained actions so you have access to AWS Billing, AWS Cost Management, and AWS accounts consoles.\nIf you created your AWS account or AWS Organizations Management account before March 6, 2023, the fine-grained actions will be effective starting July 2023. We recommend you to add the fine-grained actions, but not remove your existing permissions with aws-portal or purchase-orders prefixes.\nIf you created your AWS account or AWS Organizations Management account on or after March 6, 2023, the fine-grained actions are effective immediately.\nAWS assigns the following unique identifiers to each AWS account:\n  AWS account ID: A 12-digit number, such as 012345678901, that uniquely identifies an AWS account. Many AWS resources include the account ID in their Amazon Resource Names (ARNs). The account ID portion distinguishes resources in one account from the resources in another account. If you\u0026rsquo;re an AWS Identity and Access Management (IAM) user, you can sign in to the AWS Management Console using either the account ID or account alias. While account IDs, like any identifying information, should be used and shared carefully, they are not considered secret, sensitive, or confidential information.\n  Canonical user ID: An alpha-numeric identifier, such as 79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be, that is an obfuscated form of the AWS account ID. You can use this ID to identify an AWS account when granting cross-account access to buckets and objects using Amazon Simple Storage Service (Amazon S3). You can retrieve the canonical user ID for your AWS account as either the root user or an IAM user.\n  You must be authenticated with AWS to view these identifiers.\nWarning Do not provide your AWS credentials (including passwords and access keys) to a third party that needs your AWS account identifiers to share AWS resources with you. Doing so would give them the same access to the AWS account that you have.\n"
},
{
	"uri": "/2-image-upload-and-resize/2.1-upload-original-image/2.1.3-create-presignedurl-lambda-function/",
	"title": "Create GetPresigned Url Lamdba Function",
	"tags": [],
	"description": "",
	"content": "Overview In this step, you will create a Lambda function named get-presigned-url, which is responsible for generating a Presigned URL so that the frontend(web or mobile app) can upload images directly to the original S3 bucket.\nThis function is written in Node.js 22.x and uses S3 access permissions provided by an IAM Role created in the previous step.\n Create the get-presigned-url Lambda Function via AWS Console   Go to the AWS Lambda Console, click Functions, then click Create function.\n  On the Create function screen, choose Author from scratch.\n  In the Basic information section, provide the following details:\n Function name: get-presigned-url Runtime: Node.js 22.x Architecture: x86_64    AWS Lambda currently supports multiple languages including Java, .NET, Python, and Node.js.\nIn this guide, we use Node.js 22.x, which offers better performance and more modern syntax than Node.js 18.x.\n\r Under Change default execution role:\n Choose: Use an existing role Then select the IAM Role you created earlier, e.g., lambda-upload-original-role     Deploy the Lambda Source Code After clicking Create function, AWS will redirect you to the function\u0026rsquo;s code editor.\nCurrently, Lambda does not support editing ESM (import/export) code directly in the console for Node.js 22.x.\nYou need to prepare the source code and dependencies on your local machine, then zip and upload it manually.\n\r Prepare the Source Code and Dependencies  Download the sample source code here: Download sample files (replace with actual link)\n  Once extracted, the folder should include:\n index.mjs: contains the Lambda logic package.json: declares required dependencies    Open a terminal or command prompt in that folder and run:\n  npm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner 8. Package the source code to upload to Lambda  Navigate to the get-presigned-url folder. Select all files and folders inside: index.mjs, package.json, and node_modules/. Compress them into a single file named get-presigned-url-lambda.zip.  9. After creating the ZIP file  Go to AWS Lambda and select the get-presigned-url function. In the Code section, click Upload from, then choose .zip file. Select the get-presigned-url-lambda.zip file you just created.  Make sure the Lambda handler is set to: index.handler\nThe Lambda handler follows the format: \u0026lt;FILE_NAME\u0026gt;.\u0026lt;FUNCTION_NAME\u0026gt; In this case, index.handler means the file is index.mjs and it exports a function named handler.\n\r"
},
{
	"uri": "/2-image-upload-and-resize/2.2-resize-image/2.2.3-create-resize-lambda-function/",
	"title": "Create Resize Lamdba Function",
	"tags": [],
	"description": "",
	"content": "Create VPC Lab VPC  Go to VPC service management console  Click Your VPC. Click Create VPC.    At the Create VPC page.  In the Name tag field, enter Lab VPC. In the IPv4 CIDR field, enter: 10.10.0.0/16. Click Create VPC.    "
},
{
	"uri": "/4-deploy-lambda-function/4.3-delete-lambda-function/",
	"title": "Delete Lambda Function",
	"tags": [],
	"description": "",
	"content": "Creating your first AWS account Overview Main Content  Creating a new AWS Account Setting up MFA for the AWS Account root user Creating an Administrator Accounts and Groups Getting support for Account Authentication  "
},
{
	"uri": "/5-config-api-gateway/5.3-test-apis-with-postman/",
	"title": "Test APIs With Postman",
	"tags": [],
	"description": "",
	"content": "Creating your first AWS account Overview Main Content  Creating a new AWS Account Setting up MFA for the AWS Account root user Creating an Administrator Accounts and Groups Getting support for Account Authentication  "
},
{
	"uri": "/3-writing-data-to-amazon-dynamodb/",
	"title": "Writing Data to Amazon DynamoDB",
	"tags": [],
	"description": "",
	"content": "Overview After the image is successfully uploaded and resized, the next step is to manage application data – such as products and categories – by storing them in a database.\nIn this section, you will use Amazon DynamoDB – a fully managed NoSQL database service provided by AWS – to store and query your data efficiently, especially suitable for serverless architectures.\nThe data models will include:\n Product: name, description, price, resized image URL, category, etc. Category: category name, display image, etc.  Objective Create DynamoDB tables for Product and Category to store application data.\n Creating the Product Table in DynamoDB   Go to the DynamoDB Console and select Create Table from the left navigation panel.\n  In the Table details section, enter the following:\n Table name: Product Partition key: id (type: string) Leave Sort key empty (unless advanced sorting is needed).    In the Table settings section:\n You can click Customize settings to configure advanced options like Table class and Capacity mode. Table class: The default is Standard – suitable for most applications. If you need to optimize cost for rarely accessed tables, consider using Standard-IA. Capacity mode: The default is On-demand – pay only for actual read/write requests without provisioning throughput. Ideal for new apps, MVPs, or unpredictable workloads.    If you simply want to create a table quickly, you can keep the default settings without enabling Customize settings. These defaults are optimized for beginners and common use cases.\n\rScroll down and click Create table to finish.  Creating the Category Table in DynamoDB The steps to create the Category table are similar to the Product table:\n  Go to the DynamoDB Console and click Create Table.\n  In the Table details, enter:\n Table name: Category Partition key: id (type: string) Leave Sort key empty    In Table settings, you can simply use the Default settings.\n  Click Create table to finish.\n   On-demand mode is a great choice for workloads with unpredictable or spiky traffic, making it ideal for beginners or development/test environments.\nThe Partition key is required and cannot be changed after the table is created.\nYou can add Global Secondary Indexes (GSI) after the table has been created.\n\rResults Once the Product and Category tables have been successfully created, they will appear in the DynamoDB Console under the list of available tables.\n"
},
{
	"uri": "/4-deploy-lambda-function/",
	"title": "Deloy Lambda Functions",
	"tags": [],
	"description": "",
	"content": "Overview After setting up the data storage system using DynamoDB, the next step is to build AWS Lambda functions to handle the core business logic of your application. Each function corresponds to a specific data operation, such as creating, updating, deleting, or retrieving data from the database.\nLambda is a serverless compute service provided by AWS, allowing you to run code without managing servers. You focus solely on writing your application logic while AWS automatically handles scaling, availability, and billing based on actual usage.\nPurpose of Lambda Functions In this system, we will implement three basic types of Lambda functions:\n Create/Update functions: Add new or modify existing records in DynamoDB (e.g. products or categories). Delete functions: Remove records from the database — either by hard delete or soft delete. Get functions: Retrieve specific data by id, or return a list of items to display in the frontend.  These Lambda functions can be integrated with API Gateway to build RESTful APIs, or triggered by events from other services such as S3, EventBridge, etc.\n Main Steps  Create or Update Lambda Function Delete Lambda Function Get Lambda Function  "
},
{
	"uri": "/4-deploy-lambda-function/4.4-get-lambda-function/",
	"title": "Get Lambda Function",
	"tags": [],
	"description": "",
	"content": "Creating your first AWS account Overview Main Content  Creating a new AWS Account Setting up MFA for the AWS Account root user Creating an Administrator Accounts and Groups Getting support for Account Authentication  "
},
{
	"uri": "/6-setup-cognito-userpool/",
	"title": "Setup Cognito UserPool",
	"tags": [],
	"description": "",
	"content": "Content:\n Create an AWS account Add payment method Verify your phone number Select Support Plan Wait for your account to be activated Important Warning  Create an AWS account  Go to the Amazon Web Service homepage page. Select Create an AWS Account in the upper right corner.  Note: If you don\u0026rsquo;t see Create an AWS Account, select Sign In to the Console then select Create a new AWS Account.    Enter email information and AWS account name  Complete information.  Confirm the code sent from the email.  After successful email authentication. You complete the account information.  Complete the account registration documents.   You can choose Personal or Business account  Add payment method  Enter your credit card information and select Verify and Add.  Note: You can choose a different address for your account by selecting Use a new address before Verify and Add.    Verify your phone number  Enter the phone number. Enter the security check code then select Call me now. AWS will contact and verify account opening.  Select Support Plan  In the Select a support plan page, select an effective plan, to compare plans, see Compare AWS Support Plans.  Wait for your account to be activated  After selecting Support plan, the account is usually activated after a few minutes, but the process can take up to 24 hours. You will still be able to log in to your AWS account at this time, the AWS Home page may show a “Complete Sign Up” button during this time, even if you have completed all the steps in the registration section. After receiving an email confirming your account has been activated, you can access all AWS services.  Important The following AWS Identity and Access Management (IAM) actions will reach the end of standard support on July 2023: aws-portal:ModifyAccount and aws-portal:ViewAccount. See the Using fine-grained AWS Billing actions to replace these actions with fine-grained actions so you have access to AWS Billing, AWS Cost Management, and AWS accounts consoles.\nIf you created your AWS account or AWS Organizations Management account before March 6, 2023, the fine-grained actions will be effective starting July 2023. We recommend you to add the fine-grained actions, but not remove your existing permissions with aws-portal or purchase-orders prefixes.\nIf you created your AWS account or AWS Organizations Management account on or after March 6, 2023, the fine-grained actions are effective immediately.\nAWS assigns the following unique identifiers to each AWS account:\n  AWS account ID: A 12-digit number, such as 012345678901, that uniquely identifies an AWS account. Many AWS resources include the account ID in their Amazon Resource Names (ARNs). The account ID portion distinguishes resources in one account from the resources in another account. If you\u0026rsquo;re an AWS Identity and Access Management (IAM) user, you can sign in to the AWS Management Console using either the account ID or account alias. While account IDs, like any identifying information, should be used and shared carefully, they are not considered secret, sensitive, or confidential information.\n  Canonical user ID: An alpha-numeric identifier, such as 79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be, that is an obfuscated form of the AWS account ID. You can use this ID to identify an AWS account when granting cross-account access to buckets and objects using Amazon Simple Storage Service (Amazon S3). You can retrieve the canonical user ID for your AWS account as either the root user or an IAM user.\n  You must be authenticated with AWS to view these identifiers.\nWarning Do not provide your AWS credentials (including passwords and access keys) to a third party that needs your AWS account identifiers to share AWS resources with you. Doing so would give them the same access to the AWS account that you have.\n"
},
{
	"uri": "/7-authentication-and-authorization/",
	"title": "Authentication And Authorization",
	"tags": [],
	"description": "",
	"content": "Content:\n Create an AWS account Add payment method Verify your phone number Select Support Plan Wait for your account to be activated Important Warning  Create an AWS account  Go to the Amazon Web Service homepage page. Select Create an AWS Account in the upper right corner.  Note: If you don\u0026rsquo;t see Create an AWS Account, select Sign In to the Console then select Create a new AWS Account.    Enter email information and AWS account name  Complete information.  Confirm the code sent from the email.  After successful email authentication. You complete the account information.  Complete the account registration documents.   You can choose Personal or Business account  Add payment method  Enter your credit card information and select Verify and Add.  Note: You can choose a different address for your account by selecting Use a new address before Verify and Add.    Verify your phone number  Enter the phone number. Enter the security check code then select Call me now. AWS will contact and verify account opening.  Select Support Plan  In the Select a support plan page, select an effective plan, to compare plans, see Compare AWS Support Plans.  Wait for your account to be activated  After selecting Support plan, the account is usually activated after a few minutes, but the process can take up to 24 hours. You will still be able to log in to your AWS account at this time, the AWS Home page may show a “Complete Sign Up” button during this time, even if you have completed all the steps in the registration section. After receiving an email confirming your account has been activated, you can access all AWS services.  Important The following AWS Identity and Access Management (IAM) actions will reach the end of standard support on July 2023: aws-portal:ModifyAccount and aws-portal:ViewAccount. See the Using fine-grained AWS Billing actions to replace these actions with fine-grained actions so you have access to AWS Billing, AWS Cost Management, and AWS accounts consoles.\nIf you created your AWS account or AWS Organizations Management account before March 6, 2023, the fine-grained actions will be effective starting July 2023. We recommend you to add the fine-grained actions, but not remove your existing permissions with aws-portal or purchase-orders prefixes.\nIf you created your AWS account or AWS Organizations Management account on or after March 6, 2023, the fine-grained actions are effective immediately.\nAWS assigns the following unique identifiers to each AWS account:\n  AWS account ID: A 12-digit number, such as 012345678901, that uniquely identifies an AWS account. Many AWS resources include the account ID in their Amazon Resource Names (ARNs). The account ID portion distinguishes resources in one account from the resources in another account. If you\u0026rsquo;re an AWS Identity and Access Management (IAM) user, you can sign in to the AWS Management Console using either the account ID or account alias. While account IDs, like any identifying information, should be used and shared carefully, they are not considered secret, sensitive, or confidential information.\n  Canonical user ID: An alpha-numeric identifier, such as 79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be, that is an obfuscated form of the AWS account ID. You can use this ID to identify an AWS account when granting cross-account access to buckets and objects using Amazon Simple Storage Service (Amazon S3). You can retrieve the canonical user ID for your AWS account as either the root user or an IAM user.\n  You must be authenticated with AWS to view these identifiers.\nWarning Do not provide your AWS credentials (including passwords and access keys) to a third party that needs your AWS account identifiers to share AWS resources with you. Doing so would give them the same access to the AWS account that you have.\n"
},
{
	"uri": "/8-deploy-frontend/",
	"title": "Deloy Frontend",
	"tags": [],
	"description": "",
	"content": "Content:\n Create an AWS account Add payment method Verify your phone number Select Support Plan Wait for your account to be activated Important Warning  Create an AWS account  Go to the Amazon Web Service homepage page. Select Create an AWS Account in the upper right corner.  Note: If you don\u0026rsquo;t see Create an AWS Account, select Sign In to the Console then select Create a new AWS Account.    Enter email information and AWS account name  Complete information.  Confirm the code sent from the email.  After successful email authentication. You complete the account information.  Complete the account registration documents.   You can choose Personal or Business account  Add payment method  Enter your credit card information and select Verify and Add.  Note: You can choose a different address for your account by selecting Use a new address before Verify and Add.    Verify your phone number  Enter the phone number. Enter the security check code then select Call me now. AWS will contact and verify account opening.  Select Support Plan  In the Select a support plan page, select an effective plan, to compare plans, see Compare AWS Support Plans.  Wait for your account to be activated  After selecting Support plan, the account is usually activated after a few minutes, but the process can take up to 24 hours. You will still be able to log in to your AWS account at this time, the AWS Home page may show a “Complete Sign Up” button during this time, even if you have completed all the steps in the registration section. After receiving an email confirming your account has been activated, you can access all AWS services.  Important The following AWS Identity and Access Management (IAM) actions will reach the end of standard support on July 2023: aws-portal:ModifyAccount and aws-portal:ViewAccount. See the Using fine-grained AWS Billing actions to replace these actions with fine-grained actions so you have access to AWS Billing, AWS Cost Management, and AWS accounts consoles.\nIf you created your AWS account or AWS Organizations Management account before March 6, 2023, the fine-grained actions will be effective starting July 2023. We recommend you to add the fine-grained actions, but not remove your existing permissions with aws-portal or purchase-orders prefixes.\nIf you created your AWS account or AWS Organizations Management account on or after March 6, 2023, the fine-grained actions are effective immediately.\nAWS assigns the following unique identifiers to each AWS account:\n  AWS account ID: A 12-digit number, such as 012345678901, that uniquely identifies an AWS account. Many AWS resources include the account ID in their Amazon Resource Names (ARNs). The account ID portion distinguishes resources in one account from the resources in another account. If you\u0026rsquo;re an AWS Identity and Access Management (IAM) user, you can sign in to the AWS Management Console using either the account ID or account alias. While account IDs, like any identifying information, should be used and shared carefully, they are not considered secret, sensitive, or confidential information.\n  Canonical user ID: An alpha-numeric identifier, such as 79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be, that is an obfuscated form of the AWS account ID. You can use this ID to identify an AWS account when granting cross-account access to buckets and objects using Amazon Simple Storage Service (Amazon S3). You can retrieve the canonical user ID for your AWS account as either the root user or an IAM user.\n  You must be authenticated with AWS to view these identifiers.\nWarning Do not provide your AWS credentials (including passwords and access keys) to a third party that needs your AWS account identifiers to share AWS resources with you. Doing so would give them the same access to the AWS account that you have.\n"
},
{
	"uri": "/9-clean-up-resources/",
	"title": "Clean Up Resource",
	"tags": [],
	"description": "",
	"content": "Content:\n Create an AWS account Add payment method Verify your phone number Select Support Plan Wait for your account to be activated Important Warning  Create an AWS account  Go to the Amazon Web Service homepage page. Select Create an AWS Account in the upper right corner.  Note: If you don\u0026rsquo;t see Create an AWS Account, select Sign In to the Console then select Create a new AWS Account.    Enter email information and AWS account name  Complete information.  Confirm the code sent from the email.  After successful email authentication. You complete the account information.  Complete the account registration documents.   You can choose Personal or Business account  Add payment method  Enter your credit card information and select Verify and Add.  Note: You can choose a different address for your account by selecting Use a new address before Verify and Add.    Verify your phone number  Enter the phone number. Enter the security check code then select Call me now. AWS will contact and verify account opening.  Select Support Plan  In the Select a support plan page, select an effective plan, to compare plans, see Compare AWS Support Plans.  Wait for your account to be activated  After selecting Support plan, the account is usually activated after a few minutes, but the process can take up to 24 hours. You will still be able to log in to your AWS account at this time, the AWS Home page may show a “Complete Sign Up” button during this time, even if you have completed all the steps in the registration section. After receiving an email confirming your account has been activated, you can access all AWS services.  Important The following AWS Identity and Access Management (IAM) actions will reach the end of standard support on July 2023: aws-portal:ModifyAccount and aws-portal:ViewAccount. See the Using fine-grained AWS Billing actions to replace these actions with fine-grained actions so you have access to AWS Billing, AWS Cost Management, and AWS accounts consoles.\nIf you created your AWS account or AWS Organizations Management account before March 6, 2023, the fine-grained actions will be effective starting July 2023. We recommend you to add the fine-grained actions, but not remove your existing permissions with aws-portal or purchase-orders prefixes.\nIf you created your AWS account or AWS Organizations Management account on or after March 6, 2023, the fine-grained actions are effective immediately.\nAWS assigns the following unique identifiers to each AWS account:\n  AWS account ID: A 12-digit number, such as 012345678901, that uniquely identifies an AWS account. Many AWS resources include the account ID in their Amazon Resource Names (ARNs). The account ID portion distinguishes resources in one account from the resources in another account. If you\u0026rsquo;re an AWS Identity and Access Management (IAM) user, you can sign in to the AWS Management Console using either the account ID or account alias. While account IDs, like any identifying information, should be used and shared carefully, they are not considered secret, sensitive, or confidential information.\n  Canonical user ID: An alpha-numeric identifier, such as 79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be, that is an obfuscated form of the AWS account ID. You can use this ID to identify an AWS account when granting cross-account access to buckets and objects using Amazon Simple Storage Service (Amazon S3). You can retrieve the canonical user ID for your AWS account as either the root user or an IAM user.\n  You must be authenticated with AWS to view these identifiers.\nWarning Do not provide your AWS credentials (including passwords and access keys) to a third party that needs your AWS account identifiers to share AWS resources with you. Doing so would give them the same access to the AWS account that you have.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/mypost/",
	"title": "Content Placeholder",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]