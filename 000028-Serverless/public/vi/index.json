[
{
	"uri": "/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan về kiến trúc Serverless Serverless là mô hình điện toán đám mây cho phép bạn chạy ứng dụng mà không phải quản lý máy chủ, hệ điều hành hay cơ sở hạ tầng. Amazon Web Services tự động đảm nhận việc:\n Cung cấp tài nguyên tính toán khi có yêu cầu hoặc sự kiện Tự động mở rộng để đáp ứng mọi khối lượng yêu cầu, từ một đến hàng ngàn Tắt tài nguyên không sử dụng để tiết kiệm chi phí Bảo trì phần cứng và vá bảo mật  Lợi ích khi dùng Serverless\n Giảm gánh nặng vận hành: không cần quản lý máy chủ hay cấu hình auto-scaling Triển khai nhanh hơn: cập nhật code và deploy ngay lập tức Tính phí theo mức sử dụng: chỉ trả cho số lần gọi và thời gian thực thi (ms), cộng phí lưu trữ theo đơn vị read/write và GB-tháng Kiến trúc phản ứng sự kiện: dễ dàng tích hợp với S3, DynamoDB Streams và API Gateway  Tham khảo: Tổng quan về Serverless của AWS\n Các dịch vụ sử dụng trong Workshop này AWS Lambda  Dịch vụ tính toán serverless chạy mã của bạn theo sự kiện (event-driven). Tự động mở rộng theo số sự kiện; chỉ trả phí cho số lần gọi và thời gian thực thi (ms). Hỗ trợ nhiều ngôn ngữ (Node.js, Python, C#, Java, Go…) và cho phép đóng gói dependencies dưới dạng deployment package hoặc container image. Tích hợp sẵn với các dịch vụ AWS khác (S3, DynamoDB, Kinesis, SNS, SQS, API Gateway…). Hỗ trợ versioning và alias để triển khai blue/green hoặc canary deployments.  Tài liệu: Hướng dẫn nhà phát triển AWS Lambda\nAmazon API Gateway  Dịch vụ fully managed cho phép tạo, xuất bản, bảo mật và giám sát API RESTful hoặc WebSocket. Hỗ trợ hai loại API: REST APIs (nhiều tính năng) và HTTP APIs (độ trễ thấp, chi phí thấp). Cung cấp mapping templates để biến đổi payload của request/response, tích hợp với Lambda, HTTP endpoint hoặc VPC Link. Hỗ trợ sẵn CORS, throttling, caching và AWS WAF để bảo vệ API. Hỗ trợ xác thực qua Cognito User Pools, IAM roles hoặc custom Lambda authorizer.  Tài liệu: Hướng dẫn Amazon API Gateway\nAmazon S3  Lưu trữ đối tượng bền vững (99.999999999%) với khả năng mở rộng gần như vô hạn. Nhiều lớp lưu trữ (Standard, Intelligent-Tiering, Infrequent Access, Glacier) để tối ưu chi phí. Hỗ trợ versioning, lifecycle policies (tự động xóa hoặc chuyển đổi) và event notifications. Đảm bảo read-after-write consistency cho PUT mới và eventual consistency cho overwrite/DELETE. Phù hợp lưu trữ tệp tĩnh, backup, log, file media và big data.  Tài liệu: Hướng dẫn người dùng Amazon S3\nAmazon DynamoDB  Cơ sở dữ liệu NoSQL key-value/document fully managed, độ trễ mili-giây. Tự động mở rộng throughput (Read/Write Capacity Units) và dung lượng lưu trữ theo nhu cầu. Hỗ trợ eventual consistency (mặc định) và strong consistency (tùy chọn). Cung cấp DynamoDB Streams, TTL và Transactions (ACID). Kiến trúc phân tán theo partition key, đảm bảo khả năng mở rộng và độ ổn định cao.  Tài liệu: Hướng dẫn Amazon DynamoDB\nS3 Static Website Hosting  Host website tĩnh (HTML, CSS, JavaScript) trực tiếp từ bucket S3. Cấu hình bucket làm website endpoint (ví dụ http://\u0026lt;bucket-name\u0026gt;.s3-website-\u0026lt;region\u0026gt;.amazonaws.com). Hỗ trợ custom domain qua Amazon Route 53 và HTTPS qua CloudFront. Phù hợp cho SPA, landing page và tài liệu tĩnh.  Tài liệu: Hosting Static Website trên Amazon S3\nAmazon Cognito  Dịch vụ xác thực và ủy quyền cho web và mobile apps. User Pools: thư mục người dùng với API đăng ký/đăng nhập, MFA và social identity providers. Identity Pools (Federated Identities): cung cấp credentials tạm thời cho người dùng đã xác thực qua User Pools, social provider hoặc SAML/OIDC. Hỗ trợ OAuth 2.0, OpenID Connect và JWT tokens để bảo vệ API Gateway và backend. Tích hợp với Lambda triggers để tùy chỉnh quy trình (ví dụ: trước/sau xác thực, xác minh email/phone).  Tài liệu: Hướng dẫn Amazon Cognito\n"
},
{
	"uri": "/vi/",
	"title": "Thiết lập Tài Khoản AWS",
	"tags": [],
	"description": "",
	"content": "Tạo tài khoản AWS đầu tiên Tổng quan Trong bài lab đầu tiên này, bạn sẽ tạo mới tài khoản AWS đầu tiên của mình, tạo MFA (Multi-factor Authentication) để gia tăng bảo mật tài khoản của bạn. Bước tiếp theo bạn sẽ tạo Admin Group, Admin User để quản lý quyền truy cập vào các tài nguyên trong tài khoản của mình thay vì sử dụng user root.\nCuối cùng, nếu quá trình xác thực tài khoản của bạn có vấn đề, bạn sẽ được hướng dẫn hỗ trợ xác thực tài khoản với AWS Support.\nTài khoản AWS (AWS Account) Tài khoản AWS là phương tiện để bạn có thể truy cập và sử dụng những tài nguyên và dịch vụ của AWS. Theo mặc định, mỗi tài khoản AWS sẽ có một root user. Root user có toàn quyền với tài khoản AWS của bạn, và quyền hạn của root user không thể bị giới hạn. Nếu bạn mới sử dụng tài khoản AWS lần đầu tiên, bạn sẽ truy cập vào tài khoản dưới danh nghĩa của root user.\nChính vì quyền hạn của root user không thể bị giới hạn, AWS khuyên bạn không nên sử dụng trực tiếp root user cho bất kỳ công tác nào. Thay vào đó, bạn nên tạo ra một IAM User và trao quyền quản trị cho IAM User đó để dễ dàng quản lý và giảm thiểu rủi ro.\n\rMFA (Multi-factor Authentication) MFA là một tính năng được sử dụng để gia tăng bảo mật của tài khoản AWS. Nếu MFA được kích hoạt, bạn sẽ phải nhập mã OTP (One-time Password) mỗi lần bạn đăng nhập vào tài khoản AWS.\nIAM Group IAM Group là một công cụ quản lý người dùng (IAM User) của AWS. Một IAM Group có thể chứa nhiều IAM User. Các IAM User ở trong một IAM Group đều hưởng chung quyền hạn mà IAM Group đó được gán cho.\nIAM User IAM User là một đơn vị người dùng của AWS. Khi bạn đăng nhập vào AWS, bạn sẽ phải đăng nhập dưới danh nghĩa của một IAM User. Nếu bạn mới đăng nhập vào AWS lần đầu tiên, bạn sẽ đăng nhập dưới danh nghĩa của root user (tạm dịch là người dùng gốc). Ngoài root user ra, bạn có thể tạo ra nhiều IAM User khác để cho phép người khác truy cập dài hạn vào tài nguyên AWS trong tài khoản AWS của bạn.\nAWS Support AWS Support là một đơn vị cung cấp các dịch vụ hỗ trợ khách hàng của AWS.\nNội dung chính  Tạo tài khoản AWS Thiết lập MFA cho tài khoản AWS (Root) Tài khoản và Nhóm Admin Hỗ trợ Xác thực Tài khoản  "
},
{
	"uri": "/vi/7-authentication-and-authorization/7.1-authenticate-with-cognito-api-gateway/",
	"title": "Thiết lập xác thực Cognito trong API Gateway",
	"tags": [],
	"description": "",
	"content": "Tạo tài khoản AWS đầu tiên Tổng quan Nội dung chính  Tạo tài khoản AWS Thiết lập MFA cho tài khoản AWS (Root) Tài khoản và Nhóm Admin Hỗ trợ Xác thực Tài khoản  "
},
{
	"uri": "/vi/5-config-api-gateway/5.1-create-resource-and-method/",
	"title": "Tạo các tài nguyên và phương thức tương ứng",
	"tags": [],
	"description": "",
	"content": "Tổng quan Sau khi bạn đã tạo xong API Gateway (eshop-fcj), bước tiếp theo là khai báo tài nguyên (resource) và thiết lập phương thức (method) tương ứng để kết nối đến các hàm Lambda đã triển khai, như: tạo sản phẩm, lấy danh sách, xóa,\u0026hellip;\n Các bước tạo tài nguyên và phương thức Tạo tài nguyên (resource) cho product để triển kahi các lambda về product  Truy cập vào API eshop-fcj vừa mới tạo    Mở API Gateway Console\n  Chọn API tên eshop-fcj vừa tạo\n  chọn Create Resource,\n  Trong Resource details:    Resource Path: /\n  Resource Name: Products\n  Nhấn Create Resource  Tương tự, bạn có thể tạo thêm các tài nguyên khác với\n  Đối với category để thao tác với danh mục sản phẩm:\n  Resource Path /\n  Resource Name category\n    Đối với upload-image để thao tác với việc tải các tệp ảnh:\n  Resource Path /\n  Resource Name upload\n     Thêm phương thức (Method) cho tài nguyên (Resource) Ví dụ thêm phương thức POST cho /product:\n  Chọn resource /product trong phần Resource trong API, sau đó chọn Create Method\n  Trong Method details, nhập các thông tin sau:\n    Method type : POST\n  Integration type : Lambda function\n  Lambda function : Chọn vùng chứa lamda đã triển khai và chọn lambda tương ứng , ví dụ: create-product\n  Bật chế độ Lambda proxy integration\n  Lưu ý: Trong dự án này, các API nhận dữ liệu dạng JSON body, do đó bắt buộc phải bật Lambda Proxy Integration.\n\rCuộn xuống dưới và hoàn tất chọn Create method  Ví dụ thêm phương thức GET cho /product nhưng có ID truyền vào:\n  Trong API eshop-fcj , chọn Create Resource,\n  Trong Resource details:\n    Resource Path: /products\n  Resource Name: {id}\n   Nhấn Create Resource\n  Chọn resource /products trong phần Resource trong API, sau đó chọn Resource con {id}, rồi chọn Create Method\n  Trong Method details, nhập các thông tin sau:\n    Method type : GET\n  Integration type : Lambda function\n  Bật chế độ Lambda proxy integration\n  Lambda function : Chọn vùng chứa lamda đã triển kahi avf chọn lmada tương ứng ,ví dụ: get-product\n   Thực hiện tương tự cho các phương thức và tài nguyên khác tương tự\n   Resource Path Resource Name Method Mô tả chức năng Lambda tương ứng     / products POST Tạo mới sản phẩm create-product   / products GET Lấy danh sách sản phẩm get-product   /products {id} GET Lấy sản phẩm theo ID get-product   /products {id} DELETE Xoá sản phẩm theo ID delete-product   / categories POST Tạo danh mục sản phẩm create-category   / categories GET Lấy danh sách danh mục create-category   /categories {id} GET Lấy danh mục theo ID create-category   /categories {id} DELETE Xóa danh mục theo ID create-category   / upload-image POST Tạo URL upload ảnh get-presigned-url    Bạn cần thực hiện lại các bước trên để tạo từng tài nguyên với các phương thức tưng ứng còn lại theo bảng trên nếu muốn frontend gọi được API đó!\n\r"
},
{
	"uri": "/vi/4-deploy-lambda-function/4.1-create-iam-role-for-lambda-function/",
	"title": "Tạo IAM Role cho Lambda Function",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trước khi triển khai bất kỳ hàm Lambda nào, bạn cần tạo một IAM Role – giúp cấp quyền cho hàm Lambda có thể truy cập các dịch vụ AWS khác, chẳng hạn như đọc/ghi dữ liệu từ DynamoDB. Tỏng bài này sẽ cấp quyền ****\nIAM (Identity and Access Management) hoạt động như một lớp phân quyền, cho phép Lambda hoạt động an toàn trong môi trường AWS của bạn.\nCác bước tạo IAM Role   Truy cập vào IAM Console. Sau đó ,chọn Roles ở menu bên trái.\n  Chọn Create role.\n  Trong phần Trusted entity type, chọn AWS service\n  Ở phần Use case, chọn Lambda\n  Bấm Next.\n  Trong phần Permissions policies, tìm và gán quyền AmazonDynamoDBFullAccess\n(Bạn cũng có thể tạo policy riêng nếu muốn giới hạn quyền chặt chẽ hơn.)\n  Bấm Next, đặt tên cho role, ví dụ: lambda-dynamodb-role\n  Bấm Create role để hoàn tất.\n  Tái sử dụng IAM Role này có thể dùng lại cho nhiều Lambda function khác nhau thao tác với DynamoDB như:\n Tạo hoặc cập nhật dữ liệu Xóa bản ghi Truy vấn chi tiết theo ID hoặc lấy danh sách  Trong môi trường production, nên sử dụng nguyên tắc phân quyền tối thiểu bằng cách tạo IAM policy riêng chỉ cấp quyền cần thiết (ví dụ: PutItem, GetItem, DeleteItem) thay vì dùng FullAccess.\n\r"
},
{
	"uri": "/vi/2-image-upload-and-resize/2.1-upload-original-image/2.1.1-create-s3-bucket/",
	"title": "Tạo S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong bước này, bạn sẽ tạo một S3 Bucket để lưu trữ ảnh gốc được upload từ frontend. Đây là tiền đề để thực hiện quá trình xử lý ảnh trong các bước tiếp theo.\n Các bước tạo S3 Bucket thủ công  Truy cập vào AWS S3 Console và nhấn nút Create bucket.  Tại phần General configuration, nhập các thông tin sau:    AWS Region: Nên chọn một khu vực AWS duy nhất để triển khai toàn bộ kiến trúc (Lambda, S3, DynamoDB,\u0026hellip;) nhằm giảm độ trễ và đơn giản hóa cấu hình phân quyền(ví dụ: Asia Pacific (Singapore) ap-southeast-1)\n  Bucket type: General purpose (mặc định)\n  Bucket name: upload-originals-fcj\n  Lưu ý: Tên bucket phải là duy nhất trên toàn cầu và không chứa khoảng trắng hoặc ký tự đặc biệt.\n\r Ở phần Block Public Access settings, giữ nguyên thiết lập mặc định (tất cả ô đều được chọn) để ngăn truy cập công khai.\n Vì đây là bucket chứa ảnh gốc (original), hệ thống sẽ chỉ truy cập thông qua Presigned URL, không cần public.\n   Cuối cùng, cuộn xuống và nhấn Create bucket để hoàn tất.\n   Kết quả Sau khi hoàn tất, bạn sẽ thấy bucket upload-originals-fcj xuất hiện trong danh sách. Bucket này sẽ được sử dụng trong các Lambda function để tạo Presigned URL và xử lý ảnh.\n"
},
{
	"uri": "/vi/2-image-upload-and-resize/2.2-resize-image/2.2.1-create-s3-buckets/",
	"title": "Tạo S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong bước này, bạn sẽ tạo một S3 Bucket dùng để lưu trữ ảnh đã được resize bởi Lambda function.\nBucket này sẽ được sử dụng để phân tách ảnh gốc và ảnh đã tối ưu, đảm bảo hiệu suất và bảo mật cho frontend.\n Các bước tạo S3 Bucket thủ công   Truy cập vào AWS S3 Console và nhấn nút Create bucket.\n  Tại phần General configuration, nhập các thông tin sau:\n    Bucket name: resize-image-fcj\n  AWS Region: Sử dụng cùng khu vực với các service khác (Lambda, DynamoDB, v.v\u0026hellip;) – ví dụ: Asia Pacific (Singapore) ap-southeast-1\n  Bucket type: General purpose (mặc định)\n  Lưu ý: Tên bucket phải duy nhất trên toàn cầu và không chứa khoảng trắng hoặc ký tự đặc biệt.\n\rỞ phần Block Public Access settings,    Bỏ chọn Block all public access\n  Đánh dấu vào ô I acknowledge that the current settings might result in this bucket and the objects within becoming public.\n   Vì ảnh sau khi resize sẽ được sử dụng trực tiếp trong frontend (trình duyệt), nên cần mở quyền truy cập công khai cho ảnh.\n Cuối cùng, cuộn xuống và nhấn Create bucket để hoàn tất.   ✅ Kết quả Sau khi hoàn tất, bạn sẽ thấy bucket resize-image-fcj xuất hiện trong danh sách. Bucket này sẽ được sử dụng trong các Lambda function để xử lý và tối ưu ảnh vừa tải lên.\n"
},
{
	"uri": "/vi/6-setup-cognito-userpool/6.1-create-user-pool/",
	"title": "Tạo UserPool",
	"tags": [],
	"description": "",
	"content": "Tạo tài khoản AWS đầu tiên Tổng quan Nội dung chính  Tạo tài khoản AWS Thiết lập MFA cho tài khoản AWS (Root) Tài khoản và Nhóm Admin Hỗ trợ Xác thực Tài khoản  "
},
{
	"uri": "/vi/2-image-upload-and-resize/2.1-upload-original-image/",
	"title": "Xử lý tải ảnh gốc",
	"tags": [],
	"description": "",
	"content": "Tổng quan Ở bước đầu tiên của chuỗi xử lý ảnh, mục tiêu là tải ảnh gốc (original image) từ frontend lên AWS S3 một cách bảo mật và hiệu quả.\nĐể làm điều đó, bạn sẽ sử dụng một AWS Lambda function để tạo ra một Presigned URL – liên kết tạm thời cho phép client upload ảnh trực tiếp lên S3 mà không cần server trung gian và không lộ thông tin bảo mật.\nGiai đoạn này chưa xử lý resize hay metadata – đây chỉ là bước đầu tiên để đảm bảo ảnh gốc được lưu trữ an toàn trên S3.\n\r Các bước chính  Tạo S3 Buckets Tạo IAM Role Tạo hàm Lambda GetPresignedUrl  "
},
{
	"uri": "/vi/4-deploy-lambda-function/4.2-create-or-update-lambda-function/",
	"title": "Hàm Lambda tạo hoặc cập nhập dữ liệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bước này, chúng ta sẽ triển khai hàm các:\n  Hai Lambda có tên create-product, update-product – dùng để tạo hoặc cập nhật dữ liệu sản phẩm vào DynamoDB.\n  Hai Lambda có tên create-category, update-category – dùng để tạo hoặc cập nhật danh mục vào DynamoDB.\n  Hàm này được viết bằng Node.js 22.x và sử dụng quyền truy cập DynamoDB thông qua một IAM Role đã tạo sẵn.\n Tạo hàm Lambda create-product trên AWS Console   Truy cập AWS Lambda Console, chọn Functions, sau đó bấm Create function.\n  Ở màn hình Create function, chọn Author from scratch.\n  Trong phần Basic information, nhập các thông tin:\n Function name: create-product Runtime: Node.js 22.x Architecture: x86_64    Hiện tại AWS Lambda hỗ trợ nhiều ngôn ngữ như Java, .NET, Python, Node.js,\u0026hellip;\nTrong hướng dẫn này, ta sử dụng Node.js 22.x – phiên bản mới nhất, hiệu năng cao và hỗ trợ cú pháp hiện đại hơn so với Node.js 18.x.\n\r Ở phần Change default execution role:\n Chọn: Use an existing role Sau đó chọn IAM Role bạn đã tạo, ví dụ: lambda-dynamodb-role    Sau khi nhấn Create function, Lambda sẽ chuyển sang giao diện chỉnh sửa mã.\nHiện tại Lambda chưa hỗ trợ trực tiếp trình soạn thảo ESM (import/export) cho Node.js 22.x.\nDo đó, bạn cần chuẩn bị mã nguồn và thư viện trên máy local, sau đó nén và upload thủ công.\n\rChuẩn bị mã nguồn và thư viện\nTải mã nguồn mẫu tại đây:   Tải mã nguồn tại đây resize-image-lambda.zip   Sau khi giải nén, bạn sẽ thấy các file sau:\n index.mjs: chứa logic xử lý của Lambda package.json: khai báo thư viện cần thiết    Mở Terminal hoặc Command Prompt tại thư mục chứa các file này và chạy lệnh:\n  npm install @aws-sdk/client-dynamodb uuid Sau khi nén xong tệp xong    Vào AWS Lambda, chọn hàm create-product\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n  Chọn get-presigned-url-lambda.zip vừa tạo.\n  Chọn create-product-lambda.zip vừa tạo\n  Xác nhận lại handler của lambda: index.handler Handler của Lambda có dạng: \u0026lt;TÊN_FILE\u0026gt;.\u0026lt;TÊN_HÀM\u0026gt;\n\r Tạo hàm Lambda update-product trên AWS Console   Truy cập AWS Lambda Console, chọn Functions, sau đó bấm Create function.\n  Ở màn hình Create function, chọn Author from scratch.\n  Trong phần Basic information, nhập các thông tin:\n Function name: udpate-product Runtime: Node.js 22.x Architecture: x86_64    Ở phần Change default execution role:\n Chọn: Use an existing role Sau đó chọn IAM Role bạn đã tạo, ví dụ: lambda-dynamodb-role    Chuẩn bị mã nguồn và thư viện\n Tải mã nguồn mẫu tại đây: Tải file tại đây (link cần thay thế bằng link thực tế)\n  Sau khi giải nén, bạn sẽ thấy các file sau:\n index.mjs: chứa logic xử lý của Lambda package.json: khai báo thư viện cần thiết    Mở Terminal hoặc Command Prompt tại thư mục chứa các file này và chạy lệnh:\n  npm install @aws-sdk/client-dynamodb uuid Nén mã nguồn để upload lên Lambda    Truy cập vào thư mục update-product-lambda\n  Chọn tất cả các tệp và thư mục bên trong: index.mjs, package.json, node_modules/\n  Giải nén chúng ra một tệp có tên update-product-lambda.zip\n  Sau khi nén xong tệp xong    Vào AWS Lambda, chọn hàm update-product\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n  Chọn get-presigned-url-lambda.zip vừa tạo.\n  Chọn update-product-lambda.zip vừa tạo\n  Xác nhận lại handler của lambda: index.handler Handler của Lambda có dạng: \u0026lt;TÊN_FILE\u0026gt;.\u0026lt;TÊN_HÀM\u0026gt;\n\rTạo hàm Lambda create-category trên AWS Console Thực hiện tương tự như các bước trên khi tạo các hàm cho product\n  Với các thông tin hàm lambda:\n Function name: create-category Runtime: Node.js 22.x Architecture: x86_64 Use an existing role: lambda-dynamodb-role    Với mã nguồn được chuẩn bị ở đây:\n   Tải mã nguồn tại đây create-category-lambda.zip và chạy lệnh:  npm install @aws-sdk/client-dynamodb uuid Sau khi nén xong tệp xong, đẩy file zip lên hàm lambda create-category  Tạo hàm Lambda update-category trên AWS Console Thực hiện tương tự như các bước trên khi tạo các hàm cho product\n  Với các thông tin hàm lambda:\n Function name: update-category Runtime: Node.js 22.x Architecture: x86_64 Use an existing role: lambda-dynamodb-role    Với mã nguồn được chuẩn bị ở đây:\n   Tải mã nguồn tại đây update-category-lambda.zip và chạy lệnh:  npm install @aws-sdk/client-dynamodb uuid Sau khi nén xong tệp xong, đẩy file zip lên hàm lambda update-category  "
},
{
	"uri": "/vi/6-setup-cognito-userpool/6.2-test-apis-with-postman/",
	"title": "Kiểm tra API bằng Postman",
	"tags": [],
	"description": "",
	"content": "Tạo tài khoản AWS đầu tiên Tổng quan Nội dung chính  Tạo tài khoản AWS Thiết lập MFA cho tài khoản AWS (Root) Tài khoản và Nhóm Admin Hỗ trợ Xác thực Tài khoản  "
},
{
	"uri": "/vi/7-authentication-and-authorization/7.2-authorization-with-cognito-groups/",
	"title": "Kiểm tra API bằng Postman",
	"tags": [],
	"description": "",
	"content": "Tạo tài khoản AWS đầu tiên Tổng quan Nội dung chính  Tạo tài khoản AWS Thiết lập MFA cho tài khoản AWS (Root) Tài khoản và Nhóm Admin Hỗ trợ Xác thực Tài khoản  "
},
{
	"uri": "/vi/5-config-api-gateway/5.2-enable-cros-and-deloy/",
	"title": "Kích hoạt CORS và triển khai API",
	"tags": [],
	"description": "",
	"content": "Tổng quan Sau khi bạn đã cấu hình các tài nguyên và phương thức cho API Gateway, bước tiếp theo là kích hoạt CORS (Cross-Origin Resource Sharing) để cho phép frontend (hoặc các ứng dụng khác) truy cập API từ domain khác, và sau đó deploy API để sử dụng thực tế.\n Thêm cài đặt hỗ trợ Binary file cho API   Vào API Gateway Console , chọn API vừa tạo, ví dụ: eshop-fcj.\n  Chọn API Settings ở menu phía bên trái, sau đó chọn Binary media types trong Binary media types\n  Trong Binary media types nhập thông tin:\n   Binary media type : multipart/form-data  Cuối cùng, nhấn Save changes để hoàn tất  Kích hoạt CORS cho từng phương thức Để cho phép trình duyệt gọi các API từ domain khác (ví dụ từ frontend), bạn cần bật CORS cho từng phương thức HTTP (GET, POST, DELETE, v.v).\nThực hiện theo các bước sau cho từng resource với các method tương ứng:\nKích hoạt cho resource của product   Vào API Gateway Console → chọn API eshop-fcj.\n  Trong sidebar bên trái, chọn một Resource, ví dụ /products.\n  Trong trang Resource details → chọn Enable CORS.\n  Tại cửa sổ bật lên trong CORS settings\n    Access-Control-Allow-Methods: chọn các phương thức GET, POST, và OPTIONS\n  Access-Control-Allow-Headers: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token\n  Access-Control-Allow-Origin: * (cho phép mọi domain truy cập)\n  Nhán Save để hoàn tất.  Tiếp theo là resource con của products là {id}\n Trong trang Resource details của resource con product là id → chọn Enable CORS.\n  Tại cửa sổ bật lên trong CORS settings\n    Access-Control-Allow-Methods: chọn các phương thức DELETE, PUT, DELETE và OPTIONS\n  Access-Control-Allow-Headers: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token\n  Access-Control-Allow-Origin: * (cho phép mọi domain truy cập)\n   Thực hiện tương tự kích hoạt cho các tài nguyên với phương thức tương ứng    Resource Path Access-Control-Allow-Origin Access-Control-Allow-Methods     /products * Bật CORS với GET, POST, OPTIONS   /products/{id} * Bật CORS với GET,PUT,DELETE, OPTIONS   /categories * Bật CORS với GET,PUT,DELETE, OPTIONS   /categories/{id} * Bật CORS với GET, POST, OPTIONS   /upload-image * Bật CORS với POST, OPTIONS    Bạn cần thực hiện lại các bước trên cho từng resource còn lại theo bảng trên nếu muốn frontend gọi được API đó!\n\r Triển khai API Gateway Sau khi kích hoạt CORS xong, ta cần deploy lại API để áp dụng thay đổi:\n  Vào API Gateway Console , chọn API vừa tạo, ví dụ: eshop-fcj.\n  Trong thanh bên trái, chọn Deploy API.\n  Trong cửa sổ Deploy API:\n    Nếu chưa có stage, nhấn [New Stage] để tạo mới.Nhập các thông tin:\n  Stage name: eshop\n  Deployment description: Dev environment\n    Bấm Deploy để hoàn tất  Mỗi khi bạn chỉnh sửa method hoặc resource, bắt buộc phải deploy lại API để áp dụng thay đổi và nhớ chọn đúng stage bạn đã tạo\n\r Lấy URL gọi API Sau khi deploy thành công, bạn sẽ thấy Invoke URL, có dạng:\nhttps://{restapi_id}.execute-api.{region}.amazonaws.com/{stage_name}/{resource_path} "
},
{
	"uri": "/vi/2-image-upload-and-resize/2.1-upload-original-image/2.1.2-create-iam-role/",
	"title": "Tạo IAM Role cho Lambda GetPresignedUrl",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong phần này, bạn sẽ tạo một IAM Role cho Lambda GetPresignedUrl.\nHàm Lambda này sẽ sinh ra Presigned URL để upload ảnh gốc vào S3 thông qua quyền ghi (PutObject).\nĐể tuân thủ nguyên tắc \u0026ldquo;Least Privilege\u0026rdquo;, ta sẽ tạo một IAM Policy tùy chỉnh chỉ cấp quyền ghi vào bucket vừa tạo để lưu ảnh gốc upload-originals-fcj.\n Các bước tạo IAM Policy CHo IAM Role (Custom)   Truy cập vào IAM Console. Sau đó ,chọn Policies ở menu bên trái.\n  Chọn Create policy\n  Trong giao diện Create policy, chuyển sang tab JSON dán đoạn sau vào, và thay \u0026lt;your-bucket-name\u0026gt; bằng tên bucket thực tế của bạn    ví dụ: upload-originals-fcj vừa tạo bucket nãy.\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:PutObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::\u0026lt;your-bucket-name\u0026gt;/*\u0026#34; } ] }   4. Nhấn Next , và trong phần Policy details nhập thông tin\n Policy name : S3PutOriginalImagePolicy Description - optional :S3PutOriginalImagePolicy   Cuối cùng cuộn xuống và nhấn Create policy để hoàn tất.  Các bước tạo IAM Role   Tiếp theo, Truy cập vào IAM Console. Sau đó ,chọn Roles ở menu bên trái.\n  Chọn Create role.\n  Trong phần Trusted entity type, chọn AWS service\n  Ở phần Use case, chọn Lambda\n  Bấm Next.\n  Trong phần Permissions policies, tìm và gán quyền S3PutOriginalImagePolicy\n  Bấm Next, đặt tên cho role, ví dụ: lambda-upload-original-role\n  Bấm Create role để hoàn tất.\n  Kết quả Sau khi hoàn tất, bạn sẽ thấy một IAM Role mới có tên lambda-upload-original-role xuất hiện trong phần Roles của IAM Console.\nRole này đã được cấu hình để cho phép hàm Lambda get-presigned-url upload ảnh trực tiếp vào bucket upload-originals-fcj với quyền PutObject, tuân thủ nguyên tắc bảo mật ít quyền nhất cần thiết (least privilege).\n"
},
{
	"uri": "/vi/2-image-upload-and-resize/2.2-resize-image/2.2.2-create-iam-role/",
	"title": "Tạo IAM Role cho Lambda ResizeImage",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong phần này, bạn sẽ tạo một IAM Role dành riêng cho hàm Lambda resize-image.\nHàm này sẽ thực hiện các thao tác sau:\n Đọc ảnh gốc từ S3 bucket upload-originals-fcj Resize ảnh và ghi ảnh kết quả vào S3 bucket resize-image-fcj  Để đảm bảo hệ thống tuân thủ nguyên tắc \u0026ldquo;Least Privilege\u0026rdquo; (ít quyền nhất cần thiết), chúng ta sẽ tạo một IAM Policy tùy chỉnh, chỉ cấp quyền đọc từ bucket ảnh gốc và ghi vào bucket ảnh đã resize.\n Tạo IAM Policy tùy chỉnh cho Lambda Resize   Truy cập vào IAM Console\n→ Chọn Policies ở menu bên trái\n  Nhấn nút Create policy\n  Chuyển sang tab JSON, dán đoạn cấu hình sau vào:\n  { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::upload-originals-fcj/*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:PutObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::resize-image-fcj/*\u0026#34; } ] } Nhấn Next , và trong phần Policy details nhập thông tin   Policy name : ResizeImageLambdaS3Policy Description - optional :ResizeImageLambdaS3Policy   Cuối cùng cuộn xuống và nhấn Create policy để hoàn tất.  Các bước tạo IAM Role   Tiếp theo, Truy cập vào IAM Console. Sau đó ,chọn Roles ở menu bên trái.\n  Chọn Create role.\n  Trong phần Trusted entity type, chọn AWS service\n  Ở phần Use case, chọn Lambda\n  Bấm Next.\n  Trong phần Permissions policies, tìm và gán quyền ResizeImageLambdaS3Policy\n  Bấm Next, đặt tên cho role, ví dụ: lambda-resize-image-role\n  Bấm Create role để hoàn tất.\n  Kết quả Sau khi hoàn tất, bạn sẽ thấy một IAM Role mới có tên lambda-resize-image-role xuất hiện trong phần Roles của IAM Console.\nRole này đã được cấu hình để cho phép hàm Lambda resize-image upload ảnh trực tiếp vào bucket resize-image-fcj với quyền PutObject, tuân thủ nguyên tắc bảo mật ít quyền nhất cần thiết (least privilege).\n"
},
{
	"uri": "/vi/2-image-upload-and-resize/",
	"title": "Xử lý tải ảnh và tối ưu kích thước ảnh",
	"tags": [],
	"description": "",
	"content": "Tổng quan Xử lý ảnh là một nhu cầu phổ biến trong các hệ thống hiện đại như mạng xã hội, thương mại điện tử, quản lý hồ sơ người dùng,\u0026hellip;\nTuy nhiên, để ảnh được upload an toàn, và sau đó tự động được xử lý, giảm kích thước, hệ thống cần có:\n Quy trình không qua backend trung gian (giảm tải) Xử lý tự động bằng S3 Event Trigger + AWS Lambda Phân tách ảnh gốc và ảnh đã xử lý  Trong chương này, bạn sẽ thiết lập một quy trình hoàn chỉnh cho việc tải ảnh từ client và xử lý ảnh tự động bằng AWS. Cụ thể:\n Ảnh được tải trực tiếp từ frontend lên S3 bằng Presigned URL Khi ảnh được upload thành công, S3 sẽ kích hoạt Lambda Function Lambda sẽ resize ảnh và lưu vào một bucket khác Ảnh resize sẽ được dùng để hiển thị trong frontend với kích thước và dung lượng tối ưu  Mục tiêu  Tạo cơ chế cho client (web/mobile) upload ảnh trực tiếp bằng Presigned URL Tự động resize ảnh sau khi upload bằng Lambda Function + Sharp Lưu ảnh resize vào bucket đích sẵn sàng dùng trong frontend   Các bước chính  Xử lý tải ảnh gốc Xử lý tối ưu kích thước ảnh  "
},
{
	"uri": "/vi/2-image-upload-and-resize/2.2-resize-image/",
	"title": "Xử lý tối ưu kích thước ảnh",
	"tags": [],
	"description": "",
	"content": "Tổng quan Sau khi ảnh gốc được tải lên thành công vào S3, bước tiếp theo là tự động tối ưu hóa ảnh (resize) để giảm dung lượng và phục vụ frontend hiệu quả hơn.\nThay vì để frontend tự xử lý ảnh (gây chậm, thiếu nhất quán và không bảo mật), ta sẽ để backend đảm nhận công việc này một cách tự động, nhất quán và có kiểm soát, bằng cách sử dụng AWS Lambda kết hợp với S3 Event Trigger.\nTrong phần này, bạn sẽ triển khai một Lambda function với các nhiệm vụ:\n Lắng nghe sự kiện từ S3 (khi có ảnh mới được upload) Tải ảnh gốc, resize ảnh bằng thư viện sharp Lưu ảnh đã resize vào một S3 bucket khác  Cách làm này giúp:\n Đảm bảo frontend luôn hiển thị ảnh với kích thước tối ưu Tăng tốc độ tải trang, cải thiện trải nghiệm người dùng Giảm chi phí lưu trữ và truyền tải dữ liệu (bandwidth)   Nội dung chính  Tạo hàm Lambda Resize Tạo S3 Buckets Tạo IAM Role  "
},
{
	"uri": "/vi/4-deploy-lambda-function/4.3-delete-lambda-function/",
	"title": "Hàm Lambda xoá dữ liệu sản phẩm",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bước này, chúng ta sẽ triển khai hàm các:\n  Lambda có tên delete-product– dùng để xóa dữ liệu sản phẩm vào DynamoDB.\n  Lambda có tên delete-category – dùng để xóa danh mục vào DynamoDB.\n  Hàm này được viết bằng Node.js 22.x và sử dụng quyền truy cập DynamoDB thông qua một IAM Role đã tạo sẵn.\n Tạo hàm Lambda delete-product trên AWS Console   Truy cập AWS Lambda Console, chọn Functions, sau đó bấm Create function.\n  Ở màn hình Create function, chọn Author from scratch.\n  Trong phần Basic information, nhập các thông tin:\n Function name: delete-product Runtime: Node.js 22.x Architecture: x86_64    Hiện tại AWS Lambda hỗ trợ nhiều ngôn ngữ như Java, .NET, Python, Node.js,\u0026hellip;\nTrong hướng dẫn này, ta sử dụng Node.js 22.x – phiên bản mới nhất, hiệu năng cao và hỗ trợ cú pháp hiện đại hơn so với Node.js 18.x.\n\r Ở phần Change default execution role:\n Chọn: Use an existing role Sau đó chọn IAM Role bạn đã tạo, ví dụ: lambda-dynamodb-role    Sau khi nhấn Create function, Lambda sẽ chuyển sang giao diện chỉnh sửa mã.\nHiện tại Lambda chưa hỗ trợ trực tiếp trình soạn thảo ESM (import/export) cho Node.js 22.x.\nDo đó, bạn cần chuẩn bị mã nguồn và thư viện trên máy local, sau đó nén và upload thủ công.\n\rChuẩn bị mã nguồn và thư viện\nTải mã nguồn mẫu tại đây:   Tải mã nguồn tại đây delete-product-lambda.zip   Sau khi giải nén, bạn sẽ thấy các file sau:\n index.mjs: chứa logic xử lý của Lambda package.json: khai báo thư viện cần thiết    Mở Terminal hoặc Command Prompt tại thư mục chứa các file này và chạy lệnh:\n  npm install @aws-sdk/client-dynamodb uuid Sau khi nén xong tệp xong    Vào AWS Lambda, chọn hàm delete-product\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n  Chọn delete-product-lambda.zipp vừa tạo\n  Xác nhận lại handler của lambda: index.handler Handler của Lambda có dạng: \u0026lt;TÊN_FILE\u0026gt;.\u0026lt;TÊN_HÀM\u0026gt;\n\r Tạo hàm Lambda delete-category trên AWS Console   Truy cập AWS Lambda Console, chọn Functions, sau đó bấm Create function.\n  Ở màn hình Create function, chọn Author from scratch.\n  Trong phần Basic information, nhập các thông tin:\n Function name: delete-category Runtime: Node.js 22.x Architecture: x86_64    Ở phần Change default execution role:\n Chọn: Use an existing role Sau đó chọn IAM Role bạn đã tạo, ví dụ: lambda-dynamodb-role    Chuẩn bị mã nguồn và thư viện\n Tải mã nguồn mẫu tại đây: Tải file tại đây (link cần thay thế bằng link thực tế)\n  Sau khi giải nén, bạn sẽ thấy các file sau:\n index.mjs: chứa logic xử lý của Lambda package.json: khai báo thư viện cần thiết    Mở Terminal hoặc Command Prompt tại thư mục chứa các file này và chạy lệnh:\n  npm install @aws-sdk/client-dynamodb uuid Nén mã nguồn để upload lên Lambda    Truy cập vào thư mục delete-category-lambda\n  Chọn tất cả các tệp và thư mục bên trong: index.mjs, package.json, node_modules/\n  Giải nén chúng ra một tệp có tên delete-category-lambda.zip\n  Sau khi nén xong tệp xong    Vào AWS Lambda, chọn hàm delete-category\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n  Chọn get-presigned-url-lambda.zip vừa tạo.\n  Chọn delete-category-lambda.zip vừa tạo\n  Xác nhận lại handler của lambda: index.handler Handler của Lambda có dạng: \u0026lt;TÊN_FILE\u0026gt;.\u0026lt;TÊN_HÀM\u0026gt;\n\r"
},
{
	"uri": "/vi/5-config-api-gateway/5.3-test-apis-with-postman/",
	"title": "Kiểm tra các API bằng Postman",
	"tags": [],
	"description": "",
	"content": "Tổng quan Sau khi đã triển khai API Gateway và có Invoke URL, bạn có thể sử dụng Postman để kiểm tra các API như tạo sản phẩm, lấy danh sách, xóa sản phẩm, upload ảnh, v.v.\nKiểm tra API của category Kiểm tra API để ghi dữ liệu category  Truy cập và sử dụng postman, bạn có thể sử dụng Postman theo một trong hai cách sau:    Dùng Postman bản web: Trình duyệt POSTMAN\n  Hoặc tải ứng dụng tại: Ứng dụng POSTMAN\n  Trong giao diện postman :    chọn Create new requets dấu + trên màn hình\n  Chọn phương thức POST và Nhập URL là Invoke URL từ API Gateway đã tạo ở bước trước\n  Tiếp theo chuyển sang mục body, sau đó chọn raw và sao chép đoạn dưới đây bỏ vào:\n  123123123  Rồi chọn nút send   Kết quả sẽ trả về tạo category thành công\n  Mở bảng Category trong bảng điều khiển của DynamoDB Console để kiểm tra dữ liệu\n  Kiểm tra API để lấy ra dữ liệu category  Trong giao diện postman :    chọn Create new requets dấu + trên màn hình\n  Chọn phương thức GET và Nhập InvokURL của GET API từ API Gateway được tạo từ bước trước\n  Rồi chọn nút send\n  Kết quả sẽ trả về là toàn bộ dữ liệu của bảng category đã qua xử lý  3.Ngoài ra, bạn có thể lấy dữ liệu của một Category cụ thể bằng cách thêm ID vào cuối đường dẫn.\n Chọn phương thức GET và Nhập InvokURL của GET API từ API Gateway được tạo từ bước trước + /\u0026lt;id-của-category\u0026gt;  Thường URL request có dạng\nhttps://{restapi_id}.execute-api.{region}.amazonaws.com/{stage_name}/{resource_path}/{id-category} Kiểm tra API để xóa ra dữ liệu category "
},
{
	"uri": "/vi/3-writing-data-to-amazon-dynamodb/",
	"title": "Lưu dữ liệu vào DynamoDB",
	"tags": [],
	"description": "",
	"content": "Tổng quan Sau khi ảnh đã được tải lên và xử lý thành công, bước tiếp theo là quản lý dữ liệu ứng dụng – chẳng hạn như sản phẩm (Product) và danh mục (Category) – bằng cách lưu trữ chúng vào một hệ thống cơ sở dữ liệu.\nTrong phần này, bạn sẽ sử dụng Amazon DynamoDB – một dịch vụ cơ sở dữ liệu NoSQL được quản lý toàn phần bởi AWS – để lưu trữ và truy vấn dữ liệu hiệu quả, đặc biệt phù hợp cho kiến trúc serverless.\nThông tin sản phẩm và danh mục sẽ bao gồm:\n Product: tên, mô tả, giá, đường dẫn ảnh đã resize, danh mục,\u0026hellip; Category: tên danh mục, ảnh đại diện,\u0026hellip;  Mục tiêu Tạo các bảng DynamoDB cho Product và Category để lưu trữ dữ liệu của ứng dụng.\n Tạo bảng Product trong DynamoDB   Truy cập vào DynamoDB Console và chọn Create Table từ ngăn điều hướng.\n  Trong trang Table details, nhập thông tin:\n Table name: Product Partition key: id (kiểu string) Bỏ qua Sort key nếu không cần sắp xếp nâng cao.    Trong Table settings:\n Bạn có thể nhấn Customize settings để tùy chỉnh một số cấu hình nâng cao như Table class và Capacity mode. Table class: Mặc định là Standard – phù hợp cho hầu hết các ứng dụng. Nếu muốn tiết kiệm chi phí hơn cho bảng ít truy cập, có thể chọn Standard-IA. Capacity mode: Mặc định là On-demand – chỉ tính phí theo lượt truy cập thực tế, không cần cấu hình trước. Rất phù hợp với hệ thống mới, MVP, thử nghiệm,\u0026hellip;    Nếu bạn chỉ muốn tạo bảng nhanh chóng, có thể giữ nguyên các thiết lập mặc định. Các thiết lập này đã được tối ưu cho người mới và phù hợp với đa số ứng dụng thực tế.\n\rCuối cùng, kéo xuống và nhấn Create table để hoàn tất.  Tạo bảng Category trong DynamoDB Cách tạo bảng Category cũng hoàn toàn tương tự như Product. Bạn chỉ cần:\n  Truy cập lại DynamoDB Console và chọn Create Table.\n  Trong phần Table details, nhập:\n Table name: Category Partition key: id (kiểu string) Bỏ qua Sort key    Ở phần Table settings, có thể chọn Default settings nếu không cần thay đổi gì.\n  Nhấn Create table để hoàn tất.\n   Chế độ On-demand rất phù hợp với các hệ thống có lưu lượng truy cập không đều hoặc khó dự đoán, đặc biệt lý tưởng cho người mới bắt đầu hoặc hệ thống đang thử nghiệm.\nPartition key là bắt buộc khi tạo bảng và không thể thay đổi sau này.\nBạn có thể thêm các chỉ mục phụ (Global Secondary Index) sau khi bảng đã được tạo.\n\rKết quả Sau khi tạo xong hai bảng Product và Category, bạn sẽ thấy chúng hiển thị trong danh sách bảng tại DynamoDB Console:\n"
},
{
	"uri": "/vi/2-image-upload-and-resize/2.1-upload-original-image/2.1.3-create-presignedurl-lambda-function/",
	"title": "Tạo hàm Lambda GetPresignedUrl",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bước này, bạn sẽ triển khai hàm Lambda có tên get-presigned-url, với mục tiêu là tạo ra một Presigned URL để frontend có thể upload ảnh trực tiếp lên S3 bucket ảnh gốc.\nHàm này được viết bằng Node.js 22.x và sử dụng quyền truy cập S3 thông qua một IAM Role đã tạo từ bước trước.\nTạo hàm Lambda get-presigned-url trên AWS Console   Truy cập AWS Lambda Console, chọn Functions, sau đó bấm Create function.\n  Ở màn hình Create function, chọn Author from scratch.\n  Trong phần Basic information, nhập các thông tin:\n Function name: get-presigned-url Runtime: Node.js 22.x Architecture: x86_64    Hiện tại AWS Lambda hỗ trợ nhiều ngôn ngữ như Java, .NET, Python, Node.js,\u0026hellip;\nTrong hướng dẫn này, ta sử dụng Node.js 22.x – phiên bản mới nhất, hiệu năng cao và hỗ trợ cú pháp hiện đại hơn so với Node.js 18.x.\n\r Ở phần Change default execution role:\n Chọn: Use an existing role Sau đó chọn IAM Role bạn đã tạo, ví dụ: lambda-upload-original-role     Triển khai mã nguồn cho Lambda get-presigned-url Sau khi nhấn Create function, Lambda sẽ chuyển sang giao diện chỉnh sửa mã.\nHiện tại Lambda chưa hỗ trợ trực tiếp trình soạn thảo ESM (import/export) cho Node.js 22.x.\nDo đó, bạn cần chuẩn bị mã nguồn và thư viện trên máy local, sau đó nén và upload thủ công.\n\rChuẩn bị mã nguồn và thư viện\n Tải mã nguồn mẫu tại đây: Tải file tại đây (link cần thay thế bằng link thực tế)\n  Sau khi giải nén, bạn sẽ thấy các file sau:\n index.mjs: chứa logic xử lý của Lambda package.json: khai báo thư viện cần thiết    Mở Terminal hoặc Command Prompt tại thư mục chứa các file này và chạy lệnh:\n  npm install @aws-sdk/client-dynamodb uuid Nén mã nguồn để upload lên Lambda    Truy cập vào thư mục get-presigned-url-lambda\n  Chọn tất cả các tệp và thư mục bên trong: index.mjs, package.json, node_modules/\n  Giải nén chúng ra một tệp có tên get-presigned-url-lambda.zip\n  Sau khi nén xong tệp xong    Vào AWS Lambda, chọn hàm get-presigned-url\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n  Chọn get-presigned-url-lambda.zip vừa tạo.\n  Xác nhận lại handler của lambda: index.handler Handler của Lambda có dạng: \u0026lt;TÊN_FILE\u0026gt;.\u0026lt;TÊN_HÀM\u0026gt;\n\r"
},
{
	"uri": "/vi/2-image-upload-and-resize/2.2-resize-image/2.2.3-create-resize-lambda-function/",
	"title": "Tạo hàm Lambda Resize",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bước này, bạn sẽ triển khai hàm Lambda có tên resize-image, với mục tiêu là tự động thay đổi kích thước và tối ưu dung lượng ảnh mỗi khi có ảnh mới được tải lên S3. Việc này giúp frontend truy cập ảnh nhanh hơn, giảm tải băng thông và tối ưu hiệu suất hiển thị. Hàm này được viết bằng Node.js 22.x và sử dụng quyền truy cập S3 thông qua một IAM Role đã tạo từ bước trước.\nTạo hàm Lambda resize-image trên AWS Console   Truy cập AWS Lambda Console, chọn Functions, sau đó bấm Create function.\n  Ở màn hình Create function, chọn Author from scratch.\n  Trong phần Basic information, nhập các thông tin:\n Function name: get-presigned-url Runtime: Node.js 22.x Architecture: x86_64    Hiện tại AWS Lambda hỗ trợ nhiều ngôn ngữ như Java, .NET, Python, Node.js,\u0026hellip;\nTrong hướng dẫn này, ta sử dụng Node.js 22.x – phiên bản mới nhất, hiệu năng cao và hỗ trợ cú pháp hiện đại hơn so với Node.js 18.x.\n\r Ở phần Change default execution role:\n Chọn: Use an existing role Sau đó chọn IAM Role bạn đã tạo, ví dụ: lambda-resize-image-role     Triển khai mã nguồn cho Lambda resize-image Sau khi nhấn Create function, Lambda sẽ chuyển sang giao diện chỉnh sửa mã.\nHiện tại Lambda chưa hỗ trợ trực tiếp trình soạn thảo ESM (import/export) cho Node.js 22.x.\nDo đó, bạn cần chuẩn bị mã nguồn và thư viện trên máy local, sau đó nén và upload thủ công.\n\rChuẩn bị mã nguồn và thư viện\n Tải mã nguồn mẫu tại đây: Tải file tại đây (link cần thay thế bằng link thực tế)\n  Sau khi giải nén, bạn sẽ thấy các file sau:\n index.mjs: chứa logic xử lý của Lambda package.json: khai báo thư viện cần thiết    Lưu ý Trong WS này sử dụng sharp để xử lý ảnh :\n  Là một native module nên sẽ được biên dịch theo hệ điều hành.\n  Lambda sử dụng môi trường Amazon Linux 2, khác hoàn toàn với Windows/macOS.\n  Nếu bạn cài sharp trên máy cá nhân (Windows), khi deploy lên Lambda sẽ gặp lỗi như Error: Cannot find module 'sharp' Để đảm bảo sharp hoạt động đúng, bạn phải sử dụng Docker với image Lambda chính thức của AWS để cài đặt các dependencies.\n\r  Mở Terminal hoặc Command Prompt tại thư mục chứa các file này và chạy lệnh:  docker run --rm -v \u0026#34;${PWD}:/app\u0026#34; -w /app node:22 bash -c \u0026#34;npm instal sharp\u0026#34; Nén mã nguồn để upload lên Lambda    Truy cập vào thư mục resize-image-lambda\n  Chọn tất cả các tệp và thư mục bên trong: index.mjs, package.json, node_modules/\n  Giải nén chúng ra một tệp có tên resize-image-lambda.zip\n  Sau khi nén xong tệp xong    Vào AWS Lambda, chọn hàm get-presigned-url\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n  Chọn get-presigned-url-lambda.zip vừa tạo.\n  Xác nhận lại handler của lambda: index.handler Handler của Lambda có dạng: \u0026lt;TÊN_FILE\u0026gt;.\u0026lt;TÊN_HÀM\u0026gt;\n\r Cấu hình Trigger từ S3 cho Lambda resize-image Sau khi bạn đã upload source code và thiết lập xong hàm Lambda resize-image, tiếp theo bạn cần cấu hình Trigger từ S3 để mỗi khi một ảnh được upload lên bucket, Lambda sẽ được tự động gọi và thực hiện resize.\n  Vào trang chi tiết hàm Lambda resize-image, chuyển sang tab Configuration\n  Trong phần Triggers, chọn Add trigger\n  Trong Trigger configuration chọn và nhập các thông tin sau\n    Select a source: S3 Bucket\n  Bucket: Tên bucket chứa ảnh gốc , ví dụ : upload-originals\n  Event types : All object create events\n  Prefix (optional): nhập nếu ảnh được upload vào thư mục con, ví dụ: images/originals/\n  Suffix (optional): giới hạn định dạng file ảnh cần xử lý\n  Trong workshop này, bạn cần tạo 2 trigger riêng biệt:\n  Trigger 1: Suffix = .jpg\n  Trigger 2: Suffix = .png\n  Với mỗi S3 trigger trong Lambda chỉ cho phép một Suffix duy nhất. và trong workshop này sẽ tạo hai trigger : .jpg và .png\n\rViệc khai báo rõ Suffix là rất quan trọng, giúp Lambda chỉ xử lý đúng các file ảnh, tránh lỗi và tiết kiệm chi phí vận hành.\n Đánh dấu vào ô I acknowledge that using the same S3 bucket for both input and output is not recommended and that this configuration can cause recursive invocations, increased Lambda usage, and increased costs.\n  Cuối cùng nhấn Add để hoàn tất.\n  Kết quả Sau khi hoàn tất cấu hình trigger, bạn có thể kiểm tra lại tại giao diện S3 Bucket mà bạn đã chọn làm nguồn kích hoạt.\n  Truy cập vào S3 Console, chọn bucket chứa ảnh gốc (ví dụ: upload-originals).\n  Chuyển sang tab Properties của bucket.\n  Kéo xuống phần Event notifications, bạn sẽ thấy danh sách các event trigger đã được cấu hình. Mỗi event tương ứng với một Suffix như .jpg hoặc .png.\n  Tại đây, bạn sẽ thấy các event notification gửi đến Lambda function resize-image.\n"
},
{
	"uri": "/vi/4-deploy-lambda-function/4.4-get-lambda-function/",
	"title": "Hàm Lambda lấy dữ liệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bước này, chúng ta sẽ triển khai hàm các:\n  Lambda có tên get-product– dùng để lấy dữ liệu sản phẩm vào DynamoDB.\n  Lambda có tên get-category – dùng để lấy danh mục vào DynamoDB.\n  Hàm này được viết bằng Node.js 22.x và sử dụng quyền truy cập DynamoDB thông qua một IAM Role đã tạo sẵn.\nTrong Workshop này, mỗi hàm Lambda get sẽ xử lý cả hai chức năng: lấy toàn bộ danh sách và lấy một mục theo ID. Nghĩa là chỉ cần một Lambda cho cả hai loại truy vấn.\n\r Tạo hàm Lambda get-product trên AWS Console   Truy cập AWS Lambda Console, chọn Functions, sau đó bấm Create function.\n  Ở màn hình Create function, chọn Author from scratch.\n  Trong phần Basic information, nhập các thông tin:\n Function name: get-product Runtime: Node.js 22.x Architecture: x86_64    Hiện tại AWS Lambda hỗ trợ nhiều ngôn ngữ như Java, .NET, Python, Node.js,\u0026hellip;\nTrong hướng dẫn này, ta sử dụng Node.js 22.x – phiên bản mới nhất, hiệu năng cao và hỗ trợ cú pháp hiện đại hơn so với Node.js 18.x.\n\r Ở phần Change default execution role:\n Chọn: Use an existing role Sau đó chọn IAM Role bạn đã tạo, ví dụ: lambda-dynamodb-role    Sau khi nhấn Create function, Lambda sẽ chuyển sang giao diện chỉnh sửa mã.\nHiện tại Lambda chưa hỗ trợ trực tiếp trình soạn thảo ESM (import/export) cho Node.js 22.x.\nDo đó, bạn cần chuẩn bị mã nguồn và thư viện trên máy local, sau đó nén và upload thủ công.\n\rChuẩn bị mã nguồn và thư viện\nTải mã nguồn mẫu tại đây:   Tải mã nguồn tại đây get-product-lambda.zip   Sau khi giải nén, bạn sẽ thấy các file sau:\n index.mjs: chứa logic xử lý của Lambda package.json: khai báo thư viện cần thiết    Mở Terminal hoặc Command Prompt tại thư mục chứa các file này và chạy lệnh:\n  npm install @aws-sdk/client-dynamodb uuid Sau khi nén xong tệp xong    Vào AWS Lambda, chọn hàm get-product\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n  Chọn get-product-lambda.zipp vừa tạo\n  Xác nhận lại handler của lambda: index.handler Handler của Lambda có dạng: \u0026lt;TÊN_FILE\u0026gt;.\u0026lt;TÊN_HÀM\u0026gt;\n\r Tạo hàm Lambda get-category trên AWS Console   Truy cập AWS Lambda Console, chọn Functions, sau đó bấm Create function.\n  Ở màn hình Create function, chọn Author from scratch.\n  Trong phần Basic information, nhập các thông tin:\n Function name: get-category Runtime: Node.js 22.x Architecture: x86_64    Ở phần Change default execution role:\n Chọn: Use an existing role Sau đó chọn IAM Role bạn đã tạo, ví dụ: lambda-dynamodb-role    Chuẩn bị mã nguồn và thư viện\n Tải mã nguồn mẫu tại đây: Tải file tại đây (link cần thay thế bằng link thực tế)\n  Sau khi giải nén, bạn sẽ thấy các file sau:\n index.mjs: chứa logic xử lý của Lambda package.json: khai báo thư viện cần thiết    Mở Terminal hoặc Command Prompt tại thư mục chứa các file này và chạy lệnh:\n  npm install @aws-sdk/client-dynamodb uuid Nén mã nguồn để upload lên Lambda    Truy cập vào thư mục get-category-lambda\n  Chọn tất cả các tệp và thư mục bên trong: index.mjs, package.json, node_modules/\n  Giải nén chúng ra một tệp có tên get-category-lambda.zip\n  Sau khi nén xong tệp xong    Vào AWS Lambda, chọn hàm get-category\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n  Chọn get-category-lambda.zip vừa tạo\n  Xác nhận lại handler của lambda: index.handler Handler của Lambda có dạng: \u0026lt;TÊN_FILE\u0026gt;.\u0026lt;TÊN_HÀM\u0026gt;\n\r"
},
{
	"uri": "/vi/4-deploy-lambda-function/",
	"title": "Triển khai các hàm Lambda",
	"tags": [],
	"description": "",
	"content": "Tổng quan Sau khi đã thiết lập hệ thống lưu trữ dữ liệu bằng DynamoDB, bước tiếp theo là xây dựng các hàm AWS Lambda để xử lý các nghiệp vụ chính của ứng dụng. Mỗi hàm sẽ tương ứng với một hành động thao tác dữ liệu như tạo, cập nhật, xoá, hoặc lấy thông tin từ cơ sở dữ liệu.\nLambda là một dịch vụ điện toán serverless do AWS cung cấp, cho phép bạn chạy mã mà không cần quản lý máy chủ. Bạn chỉ cần tập trung viết logic, còn việc tự động scale, chạy đúng lúc và tính phí theo số lần gọi sẽ do Lambda đảm nhiệm.\nVai trò của các hàm Lambda Trong hệ thống này, ta sẽ triển khai ba loại hàm Lambda cơ bản:\n Hàm tạo/cập nhật dữ liệu: thêm mới hoặc cập nhật thông tin sản phẩm và danh mục vào DynamoDB. Hàm xoá dữ liệu: xoá cứng hoặc xoá mềm bản ghi khỏi cơ sở dữ liệu. Hàm lấy dữ liệu: lấy thông tin chi tiết theo id, hoặc lấy danh sách để hiển thị trong ứng dụng.  Những hàm này có thể được tích hợp vào API Gateway để tạo thành API RESTful hoặc gắn với các sự kiện khác (ví dụ: upload ảnh thành công từ S3, người dùng thao tác,\u0026hellip;).\n Chuẩn bị: Tạo IAM Role cho Lambda Trước khi tạo các hàm Lambda, bạn cần một IAM Role để cấp quyền truy cập DynamoDB. Đây là bước bắt buộc để Lambda có thể thao tác dữ liệu. Thực hiện như sau:\n Truy cập vào IAM Console → mục Roles → nhấn Create role. Ở phần Trusted entity type, chọn: AWS service. Ở mục Use case, chọn: Lambda. Bấm Next và gán quyền:  Tìm và chọn policy: AmazonDynamoDBFullAccess (hoặc custom policy nếu muốn giới hạn quyền).   Đặt tên Role, ví dụ: lambda-dynamodb-role. Bấm Create role.   Các bước chính  Hàm Lambda tạo hoặc cập nhập dữ liệu Hàm Lambda xóa dữ liệu Hàm Lambda lấy dữ liệu  "
},
{
	"uri": "/vi/5-config-api-gateway/",
	"title": "Thiết lập API Gateway",
	"tags": [],
	"description": "",
	"content": "Tổng quan  Tạo API Gateway Chúng ta sẽ thiết lập API Gateway để tương tác với các Lambda function đã tạo ở phần trước:\n  Mở bảng điều khiển Amazon API Gateway và chọn Create an API\n  Trong phần Choose an API type, cuộn xuống dưới và chọn REST API, sau đó bấm Build\n  Trong mục API details, nhập các thông tin sau:\n Chọn: New API API name: eshop-fcj Description (tuỳ chọn): eshop-fcj API endpoint type: Regional IP address type: IPv4     Các bước chính  Tạo tài nguyên và phương thức Kích hoạt CORS Kiểm tra các API bằng Postman  "
},
{
	"uri": "/vi/6-setup-cognito-userpool/",
	"title": "Thiết lập Cognito UserPool",
	"tags": [],
	"description": "",
	"content": "Nội dung:\n Hướng dẫn Tạo tài khoản AWS Thêm phương thức thanh toán Xác thực số điện thoại của bạn Chọn Support Plan Đợi account của bạn được kích hoạt  Hướng dẫn Tạo tài khoản AWS  Đi đến trang Amazon Web Service homepage. Chọn Create an AWS Account ở góc trên bên phải.  Ghi Chú: Nếu bạn không thấy Create an AWS Account, chọn Sign In to the Console sau đó chọn Create a new AWS Account.    Nhập thông tin email và AWS account name.  Hoàn thành thông tin.  Xác nhận mã được gửi từ email.  Sau khi xác thực email thành công, bạn hoàn thành thông tin tài khoản.  Thực hiện hoàn thành hồ sơ đăng ký tài khoản.  Bạn có thể chọn tài khoản Personal hoặc Business.     Thêm phương thức thanh toán  Nhập thông tin thẻ tín dụng của bạn và chọn Verify and Add.  *Ghi chú: Bạn có thể chọn 1 địa chỉ khác cho tài khoản của bạn bằng cách chọn Use a new address trước khi Verify and Add.     Xác thực số điện thoại của bạn  Nhập số điện thoại. Nhập mã security check sau đó chọn Call me now. AWS sẽ liên hệ và xác thực mở tài khoản.   Chọn Support Plan  Trong trang Select a support plan, chọn 1 plan có hiệu lực, để so sánh giữa các plan, bạn hãy xem Compare AWS Support Plans.   Đợi account của bạn được kích hoạt  Sau khi chọn Support plan, account thường được kích hoạt sau vài phút, nhưng quá trình có thể cần tốn đến 24 tiếng. Bạn vẫn có thể đăng nhập vào account AWS lúc này, Trang chủ AWS có thể sẽ hiển thị một nút “Complete Sign Up” trong thời gian này, cho dù bạn đã hoàn thành tất cả các bước ở phần đăng kí. Sau khi nhận được email xác nhận account của bạn đã được kích hoạt, bạn có thể truy cập vào tất cả dịch vụ của AWS.  "
},
{
	"uri": "/vi/8-deploy-frontend/",
	"title": "Triển khai Frontend",
	"tags": [],
	"description": "",
	"content": "Nội dung:\n Hướng dẫn Tạo tài khoản AWS Thêm phương thức thanh toán Xác thực số điện thoại của bạn Chọn Support Plan Đợi account của bạn được kích hoạt  Hướng dẫn Tạo tài khoản AWS  Đi đến trang Amazon Web Service homepage. Chọn Create an AWS Account ở góc trên bên phải.  Ghi Chú: Nếu bạn không thấy Create an AWS Account, chọn Sign In to the Console sau đó chọn Create a new AWS Account.    Nhập thông tin email và AWS account name.  Hoàn thành thông tin.  Xác nhận mã được gửi từ email.  Sau khi xác thực email thành công, bạn hoàn thành thông tin tài khoản.  Thực hiện hoàn thành hồ sơ đăng ký tài khoản.  Bạn có thể chọn tài khoản Personal hoặc Business.     Thêm phương thức thanh toán  Nhập thông tin thẻ tín dụng của bạn và chọn Verify and Add.  *Ghi chú: Bạn có thể chọn 1 địa chỉ khác cho tài khoản của bạn bằng cách chọn Use a new address trước khi Verify and Add.     Xác thực số điện thoại của bạn  Nhập số điện thoại. Nhập mã security check sau đó chọn Call me now. AWS sẽ liên hệ và xác thực mở tài khoản.   Chọn Support Plan  Trong trang Select a support plan, chọn 1 plan có hiệu lực, để so sánh giữa các plan, bạn hãy xem Compare AWS Support Plans.   Đợi account của bạn được kích hoạt  Sau khi chọn Support plan, account thường được kích hoạt sau vài phút, nhưng quá trình có thể cần tốn đến 24 tiếng. Bạn vẫn có thể đăng nhập vào account AWS lúc này, Trang chủ AWS có thể sẽ hiển thị một nút “Complete Sign Up” trong thời gian này, cho dù bạn đã hoàn thành tất cả các bước ở phần đăng kí. Sau khi nhận được email xác nhận account của bạn đã được kích hoạt, bạn có thể truy cập vào tất cả dịch vụ của AWS.  "
},
{
	"uri": "/vi/7-authentication-and-authorization/",
	"title": "Xác thực và phân quyền",
	"tags": [],
	"description": "",
	"content": "Nội dung:\n Hướng dẫn Tạo tài khoản AWS Thêm phương thức thanh toán Xác thực số điện thoại của bạn Chọn Support Plan Đợi account của bạn được kích hoạt  Hướng dẫn Tạo tài khoản AWS  Đi đến trang Amazon Web Service homepage. Chọn Create an AWS Account ở góc trên bên phải.  Ghi Chú: Nếu bạn không thấy Create an AWS Account, chọn Sign In to the Console sau đó chọn Create a new AWS Account.    Nhập thông tin email và AWS account name.  Hoàn thành thông tin.  Xác nhận mã được gửi từ email.  Sau khi xác thực email thành công, bạn hoàn thành thông tin tài khoản.  Thực hiện hoàn thành hồ sơ đăng ký tài khoản.  Bạn có thể chọn tài khoản Personal hoặc Business.     Thêm phương thức thanh toán  Nhập thông tin thẻ tín dụng của bạn và chọn Verify and Add.  *Ghi chú: Bạn có thể chọn 1 địa chỉ khác cho tài khoản của bạn bằng cách chọn Use a new address trước khi Verify and Add.     Xác thực số điện thoại của bạn  Nhập số điện thoại. Nhập mã security check sau đó chọn Call me now. AWS sẽ liên hệ và xác thực mở tài khoản.   Chọn Support Plan  Trong trang Select a support plan, chọn 1 plan có hiệu lực, để so sánh giữa các plan, bạn hãy xem Compare AWS Support Plans.   Đợi account của bạn được kích hoạt  Sau khi chọn Support plan, account thường được kích hoạt sau vài phút, nhưng quá trình có thể cần tốn đến 24 tiếng. Bạn vẫn có thể đăng nhập vào account AWS lúc này, Trang chủ AWS có thể sẽ hiển thị một nút “Complete Sign Up” trong thời gian này, cho dù bạn đã hoàn thành tất cả các bước ở phần đăng kí. Sau khi nhận được email xác nhận account của bạn đã được kích hoạt, bạn có thể truy cập vào tất cả dịch vụ của AWS.  "
},
{
	"uri": "/vi/9-clean-up-resources/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Nội dung:\n Hướng dẫn Tạo tài khoản AWS Thêm phương thức thanh toán Xác thực số điện thoại của bạn Chọn Support Plan Đợi account của bạn được kích hoạt  Hướng dẫn Tạo tài khoản AWS  Đi đến trang Amazon Web Service homepage. Chọn Create an AWS Account ở góc trên bên phải.  Ghi Chú: Nếu bạn không thấy Create an AWS Account, chọn Sign In to the Console sau đó chọn Create a new AWS Account.    Nhập thông tin email và AWS account name.  Hoàn thành thông tin.  Xác nhận mã được gửi từ email.  Sau khi xác thực email thành công, bạn hoàn thành thông tin tài khoản.  Thực hiện hoàn thành hồ sơ đăng ký tài khoản.  Bạn có thể chọn tài khoản Personal hoặc Business.     Thêm phương thức thanh toán  Nhập thông tin thẻ tín dụng của bạn và chọn Verify and Add.  *Ghi chú: Bạn có thể chọn 1 địa chỉ khác cho tài khoản của bạn bằng cách chọn Use a new address trước khi Verify and Add.     Xác thực số điện thoại của bạn  Nhập số điện thoại. Nhập mã security check sau đó chọn Call me now. AWS sẽ liên hệ và xác thực mở tài khoản.   Chọn Support Plan  Trong trang Select a support plan, chọn 1 plan có hiệu lực, để so sánh giữa các plan, bạn hãy xem Compare AWS Support Plans.   Đợi account của bạn được kích hoạt  Sau khi chọn Support plan, account thường được kích hoạt sau vài phút, nhưng quá trình có thể cần tốn đến 24 tiếng. Bạn vẫn có thể đăng nhập vào account AWS lúc này, Trang chủ AWS có thể sẽ hiển thị một nút “Complete Sign Up” trong thời gian này, cho dù bạn đã hoàn thành tất cả các bước ở phần đăng kí. Sau khi nhận được email xác nhận account của bạn đã được kích hoạt, bạn có thể truy cập vào tất cả dịch vụ của AWS.  "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]